{"config":{"lang":["ru","en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DrawZero","text":"<p>DrawZero helps you draw on a virtual canvas with almost no setup. The documentation below collects the most helpful entry points so you can jump straight to the topic you need.</p>"},{"location":"#quick-navigation","title":"Quick navigation","text":"<ul> <li>Installation \u2013 set up the library and run your first   script.</li> <li>Drawing primitives \u2013 learn every basic shape, color, and   text helper.</li> <li>Animations \u2013 understand the frame loop, <code>tick()</code>, and motion   trails for moving sketches.</li> <li>Examples overview \u2013 browse runnable demo scripts that   combine the primitives and animation helpers.</li> </ul>"},{"location":"_color_table/","title":"color table","text":"Column 1 Column 2 Column 3 Column 4 Column 5 aliceblue firebrick grey4 lemonchiffon3 palevioletred4 antiquewhite firebrick1 grey5 lemonchiffon4 papayawhip antiquewhite1 firebrick2 grey6 lightblue peachpuff antiquewhite2 firebrick3 grey7 lightblue1 peachpuff1 antiquewhite3 firebrick4 grey8 lightblue2 peachpuff2 antiquewhite4 floralwhite grey9 lightblue3 peachpuff3 aqua forestgreen grey10 lightblue4 peachpuff4 aquamarine fuchsia grey11 lightcoral peru aquamarine1 gainsboro grey12 lightcyan pink aquamarine2 ghostwhite grey13 lightcyan1 pink1 aquamarine3 gold grey14 lightcyan2 pink2 aquamarine4 gold1 grey15 lightcyan3 pink3 azure gold2 grey16 lightcyan4 pink4 azure1 gold3 grey17 lightgoldenrod plum azure3 gold4 grey18 lightgoldenrod1 plum1 azure2 goldenrod grey19 lightgoldenrod2 plum2 azure4 goldenrod1 grey20 lightgoldenrod3 plum3 beige goldenrod2 grey21 lightgoldenrod4 plum4 bisque goldenrod3 grey22 lightgoldenrodyellow powderblue bisque1 goldenrod4 grey23 lightgray purple bisque2 gray grey24 lightgreen purple1 bisque3 gray0 grey25 lightgrey purple2 bisque4 gray1 grey26 lightpink purple3 black gray2 grey27 lightpink1 purple4 blanchedalmond gray3 grey28 lightpink2 red blue gray4 grey29 lightpink3 red1 blue1 gray5 grey30 lightpink4 red2 blue2 gray6 grey31 lightsalmon red3 blue3 gray7 grey32 lightsalmon1 red4 blue4 gray8 grey33 lightsalmon2 rosybrown blueviolet gray9 grey34 lightsalmon3 rosybrown1 brown gray10 grey35 lightsalmon4 rosybrown2 brown1 gray11 grey36 lightseagreen rosybrown3 brown2 gray12 grey37 lightskyblue rosybrown4 brown3 gray13 grey38 lightskyblue1 royalblue brown4 gray14 grey39 lightskyblue2 royalblue1 burlywood gray15 grey40 lightskyblue3 royalblue2 burlywood1 gray16 grey41 lightskyblue4 royalblue3 burlywood2 gray17 grey42 lightslateblue royalblue4 burlywood3 gray18 grey43 lightslategray salmon burlywood4 gray19 grey44 lightslategrey salmon1 cadetblue gray20 grey45 lightsteelblue salmon2 cadetblue1 gray21 grey46 lightsteelblue1 salmon3 cadetblue2 gray22 grey47 lightsteelblue2 salmon4 cadetblue3 gray23 grey48 lightsteelblue3 saddlebrown cadetblue4 gray24 grey49 lightsteelblue4 sandybrown chartreuse gray25 grey50 lightyellow seagreen chartreuse1 gray26 grey51 lightyellow1 seagreen1 chartreuse2 gray27 grey52 lightyellow2 seagreen2 chartreuse3 gray28 grey53 lightyellow3 seagreen3 chartreuse4 gray29 grey54 lightyellow4 seagreen4 chocolate gray30 grey55 linen seashell chocolate1 gray31 grey56 lime seashell1 chocolate2 gray32 grey57 limegreen seashell2 chocolate3 gray33 grey58 magenta seashell3 chocolate4 gray34 grey59 magenta1 seashell4 coral gray35 grey60 magenta2 sienna coral1 gray36 grey61 magenta3 sienna1 coral2 gray37 grey62 magenta4 sienna2 coral3 gray38 grey63 maroon sienna3 coral4 gray39 grey64 maroon1 sienna4 cornflowerblue gray40 grey65 maroon2 silver cornsilk gray41 grey66 maroon3 skyblue cornsilk1 gray42 grey67 maroon4 skyblue1 cornsilk2 gray43 grey68 mediumaquamarine skyblue2 cornsilk3 gray44 grey69 mediumblue skyblue3 cornsilk4 gray45 grey70 mediumorchid skyblue4 crimson gray46 grey71 mediumorchid1 slateblue cyan gray47 grey72 mediumorchid2 slateblue1 cyan1 gray48 grey73 mediumorchid3 slateblue2 cyan2 gray49 grey74 mediumorchid4 slateblue3 cyan3 gray50 grey75 mediumpurple slateblue4 cyan4 gray51 grey76 mediumpurple1 slategray darkblue gray52 grey77 mediumpurple2 slategray1 darkcyan gray53 grey78 mediumpurple3 slategray2 darkgoldenrod gray54 grey79 mediumpurple4 slategray3 darkgoldenrod1 gray55 grey80 mediumseagreen slategray4 darkgoldenrod2 gray56 grey81 mediumslateblue slategrey darkgoldenrod3 gray57 grey82 mediumspringgreen snow darkgoldenrod4 gray58 grey83 mediumturquoise snow1 darkgray gray59 grey84 mediumvioletred snow2 darkgreen gray60 grey85 midnightblue snow3 darkgrey gray61 grey86 mintcream snow4 darkkhaki gray62 grey87 mistyrose springgreen darkmagenta gray63 grey88 mistyrose1 springgreen1 darkolivegreen gray64 grey89 mistyrose2 springgreen2 darkolivegreen1 gray65 grey90 mistyrose3 springgreen3 darkolivegreen2 gray66 grey91 mistyrose4 springgreen4 darkolivegreen3 gray67 grey92 moccasin steelblue darkolivegreen4 gray68 grey93 navajowhite steelblue1 darkorange gray69 grey94 navajowhite1 steelblue2 darkorange1 gray70 grey95 navajowhite2 steelblue3 darkorange2 gray71 grey96 navajowhite3 steelblue4 darkorange3 gray72 grey97 navajowhite4 tan darkorange4 gray73 grey98 navy tan1 darkorchid gray74 grey99 navyblue tan2 darkorchid1 gray75 grey100 oldlace tan3 darkorchid2 gray76 honeydew olive tan4 darkorchid3 gray77 honeydew1 olivedrab teal darkorchid4 gray78 honeydew2 olivedrab1 thistle darkred gray79 honeydew3 olivedrab2 thistle1 darksalmon gray80 honeydew4 olivedrab3 thistle2 darkseagreen gray81 hotpink olivedrab4 thistle3 darkseagreen1 gray82 hotpink1 orange thistle4 darkseagreen2 gray83 hotpink2 orange1 tomato darkseagreen3 gray84 hotpink3 orange2 tomato1 darkseagreen4 gray85 hotpink4 orange3 tomato2 darkslateblue gray86 indianred orange4 tomato3 darkslategray gray87 indianred1 orangered tomato4 darkslategray1 gray88 indianred2 orangered1 turquoise darkslategray2 gray89 indianred3 orangered2 turquoise1 darkslategray3 gray90 indianred4 orangered3 turquoise2 darkslategray4 gray91 indigo orangered4 turquoise3 darkslategrey gray92 ivory orchid turquoise4 darkturquoise gray93 ivory1 orchid1 violet darkviolet gray94 ivory2 orchid2 violetred deeppink gray95 ivory3 orchid3 violetred1 deeppink1 gray96 ivory4 orchid4 violetred2 deeppink2 gray97 khaki palegreen violetred3 deeppink3 gray98 khaki1 palegreen1 violetred4 deeppink4 gray99 khaki2 palegreen2 wheat deepskyblue gray100 khaki3 palegreen3 wheat1 deepskyblue1 green khaki4 palegreen4 wheat2 deepskyblue2 green1 lavender palegoldenrod wheat3 deepskyblue3 green2 lavenderblush paleturquoise wheat4 deepskyblue4 green3 lavenderblush1 paleturquoise1 white dimgray green4 lavenderblush2 paleturquoise2 whitesmoke dimgrey greenyellow lavenderblush3 paleturquoise3 yellow dodgerblue grey lavenderblush4 paleturquoise4 yellow1 dodgerblue1 grey0 lawngreen palevioletred yellow2 dodgerblue2 grey1 lemonchiffon palevioletred1 yellow3 dodgerblue3 grey2 lemonchiffon1 palevioletred2 yellow4 dodgerblue4 grey3 lemonchiffon2 palevioletred3 yellowgreen"},{"location":"animation/","title":"DrawZero animations","text":""},{"location":"animation/#introduction","title":"Introduction","text":"<p>This page explains how to build smooth animations in DrawZero. We use very simple English and many examples, so even middle school students who are not native speakers can follow along. By the end, you will know how to control the animation loop, how to draw every frame, how to keep a stable frame rate, and how to add extra visual effects like motion trails.</p>"},{"location":"animation/#the-animation-event-loop","title":"The animation event loop","text":"<p>All DrawZero animations follow the same rhythm. A typical loop looks like this:</p> <pre><code>while True:\n    tick()\n    clear()\n    # draw something here\n</code></pre> <p>Let us look at each step in the loop.</p> <ol> <li><code>tick()</code> waits so that we keep a constant frame rate and collects new input    events from the keyboard and the mouse.</li> <li><code>clear()</code> resets the screen before we draw the next frame. You can replace it    with other tricks (for example, transparent fills) when you want a motion    trail.</li> <li>After that you draw shapes, text, or images for this frame.</li> </ol> <p>When the loop reaches the end, it starts again. This repeats many times every second, which creates the animation.</p>"},{"location":"animation/#why-the-order-matters","title":"Why the order matters","text":"<p>Always call <code>tick()</code> before drawing. The function updates the internal timer and processes window events. If you skip it, the window can freeze and the close button might stop working. Clearing the screen after <code>tick()</code> but before drawing makes sure the new frame does not mix with the previous one (unless you want that on purpose for a trail effect).</p>"},{"location":"animation/#a-complete-first-example","title":"A complete first example","text":"<p>Here is a tiny program that moves a circle from left to right:</p> <pre><code>from drawzero import *\n\nx = 50\nspeed = 5\n\nwhile True:\n    tick()            # keep 30 frames per second and read events\n    clear()           # erase the previous frame\n\n    circle('orange', (x, 300), 40, line_width=4)\n    filled_circle('yellow', (x, 300), 32)\n\n    x += speed        # change the position for the next frame\n    if x &gt; 1100:\n        x = 50\n</code></pre> <p>Run it and you will see the circle travel across the screen. Try changing the speed or the size to experiment.</p>"},{"location":"animation/#function-reference","title":"Function reference","text":""},{"location":"animation/#clear","title":"<code>clear()</code>","text":"<pre><code>def clear():\n    \"\"\"Reset the screen to black.\"\"\"\n</code></pre> <p><code>clear()</code> wipes the canvas to solid black. You usually call it once per frame to start with a clean surface. This is the quickest way to remove everything drawn in the previous frame.</p> <p>Tip: if you prefer a different background color, you can draw a filled rectangle that covers the full window right after <code>clear()</code>.</p>"},{"location":"animation/#fillcolorred-alpha255","title":"<code>fill(color='red', alpha=255)</code>","text":"<p><code>fill()</code> covers the screen with a color. The <code>alpha</code> parameter controls transparency. When <code>alpha</code> is less than <code>255</code>, the new color is semi-transparent. You can use this trick instead of <code>clear()</code> to keep motion trails:</p> <pre><code>while True:\n    tick()\n    fill('black', alpha=30)  # almost clear, but keep a soft trail\n    # draw moving objects here\n</code></pre> <p>A low alpha value (for example <code>30</code>) gives a long trail, because the old drawing fades slowly. A higher alpha (for example <code>200</code>) erases the frame almost like a full <code>clear()</code>.</p>"},{"location":"animation/#tickr1","title":"<code>tick(r=1)</code>","text":"<pre><code>def tick(r=1):\n    \"\"\"Sleep for 1/30 of a second.\n    If tick functions is called in a loop, then sleep time is reduced so\n    takes 1/30 second between calls. For example if calculations between tick() calls take 1/60s,\n    then tick sleeps for 1/60s. So while calculations takes less then 1/30s tick()\n    we get 30 frames per second.\"\"\"\n</code></pre> <p>Calling <code>tick()</code> keeps the animation running at 30 frames per second (FPS). This only works when your own drawing and calculations are fast enough. If one loop iteration takes less than 1/30 of a second, <code>tick()</code> sleeps for the remaining fraction so that the total time between frames is almost exactly 1/30 second. As long as you stay under this limit, the animation is smooth and stable.</p> <p>The optional parameter <code>r</code> lets you advance several ticks at once. DrawZero will run the internal frame update <code>r</code> times back-to-back. This is helpful when you want to fast-forward your simulation without redrawing in between. Most programs keep the default value <code>1</code>.</p> <p>Besides the timing, <code>tick()</code> empties the window event queue. It collects all new mouse moves, button clicks, and key presses so you can read them from the global lists in <code>drawzero.utils.events</code>. If you skip <code>tick()</code>, you will not see user input and the window may stop responding.</p>"},{"location":"animation/#sleept1","title":"<code>sleep(t=1)</code>","text":"<pre><code>def sleep(t=1):\n    \"\"\"Sleep for t seconds\n\n    :param t: Number of seconds to sleep\n    \"\"\"\n</code></pre> <p><code>sleep()</code> pauses the program for a longer time. Internally it is just a loop of <code>t * 30</code> calls to <code>tick()</code>, so the window continues to process events. Use this when you need a break between animation phases. Example: show a text for two seconds before you start moving objects.</p> <pre><code>clear()\ntext('white', 'Ready...', (400, 320), fontsize=48)\nsleep(2)\n</code></pre>"},{"location":"animation/#fpsfontsize24","title":"<code>fps(fontsize=24)</code>","text":"<pre><code>def fps(fontsize=24, *, prev=[time()]):\n    cur = time()\n    diff = cur - prev[0]\n    prev[0] = cur\n    rate = int(1 / diff + 0.5)\n    text('white', f'{rate} FPS', (1000, 000), fontsize, '&gt;^')\n</code></pre> <p>Call <code>fps()</code> once per frame to draw a small counter in the upper-right corner. It measures the time between the current call and the previous call, converts it into frames per second, and writes the number on screen. Change <code>fontsize</code> if you need bigger or smaller text.</p> <p>If the number drops far below 30, your animation code is too slow. Try reducing the amount of work you do each frame, or draw fewer very complex shapes.</p>"},{"location":"animation/#working-with-frame-based-motion","title":"Working with frame-based motion","text":"<p>Because <code>tick()</code> keeps the loop at 30 FPS, you can describe motion in \"pixels per frame\". For example, adding <code>5</code> to the x position each frame means the object moves 150 pixels every second (<code>30 * 5</code>). If you want movement that stays the same even when the frame rate changes, measure the actual time difference. You can store the timestamp at the end of each loop using the <code>time()</code> function and scale your motion by that delta.</p> <pre><code>from time import time\n\nx = 100\nspeed_per_second = 200  # pixels each second\nprev_time = time()\n\nwhile True:\n    tick()\n    now = time()\n    dt = now - prev_time\n    prev_time = now\n\n    clear()\n    x += speed_per_second * dt\n    filled_circle('cyan', (x, 300), 30)\n</code></pre>"},{"location":"animation/#adding-trails-with-transparent-fills","title":"Adding trails with transparent fills","text":"<p>To create comet-like trails, replace <code>clear()</code> with a dark transparent fill. The old drawing will fade slowly, and the new drawing will appear on top.</p> <pre><code>while True:\n    tick()\n    fill('black', alpha=20)      # low alpha = long trail\n    filled_circle('lime', pos, 20)\n</code></pre> <p>You can also mix both methods: call <code>clear()</code> every few frames to reset the screen, and use <code>fill()</code> with <code>alpha</code> in between to keep a shorter trail.</p>"},{"location":"animation/#structuring-larger-animations","title":"Structuring larger animations","text":"<p>Here are some tips when your animation grows:</p> <ul> <li>Wrap your drawing code in functions to keep the <code>while True</code> loop small and   easy to read.</li> <li>Keep calculations outside of the drawing commands. Update positions first,   then draw everything.</li> <li>Use <code>tick()</code> only once per frame. If you call it several times, your animation   will slow down because the function may wait after each call.</li> <li>Remember that <code>sleep()</code> also calls <code>tick()</code> internally. This means the window   stays responsive even during pauses.</li> <li>Monitor the FPS counter during development. A steady value around 30 means   your loop is healthy.</li> </ul>"},{"location":"animation/#more-practice-ideas","title":"More practice ideas","text":"<ol> <li>Make a bouncing ball that changes direction when it hits the window edge.</li> <li>Draw a snake-like trail using <code>fill('black', alpha=10)</code> and a moving circle.</li> <li>Create a night sky with moving stars. Use different speeds for each star and    call <code>fps()</code> to make sure the loop stays fast.</li> </ol> <p>Experiment with the examples above, combine the functions, and you will quickly feel how the DrawZero animation loop works. Have fun creating your own animated stories!</p>"},{"location":"architecture/","title":"DrawZero Architecture Overview","text":"<p>This document summarizes the internal layout of the DrawZero project so that contributors (and code-generation agents) can quickly orient themselves in the codebase.</p>"},{"location":"architecture/#package-layout","title":"Package layout","text":"<pre><code>src/drawzero/\n\u251c\u2500\u2500 __init__.py          # Re-exported public API\n\u251c\u2500\u2500 __main__.py          # CLI entry point (copies examples, draws demo frame)\n\u251c\u2500\u2500 examples/            # Tutorial-style scripts executed by tests\n\u2514\u2500\u2500 utils/               # Core rendering, math, and convenience helpers\n</code></pre> <p>Other notable top-level folders:</p> <ul> <li><code>docs/</code> \u2013 MkDocs documentation shipped on PyPI; suitable place for additional guides.</li> <li><code>tests/</code> \u2013 Pytest and unittest suites that import examples, validate converters, gradients, points, and internationalization helpers.</li> </ul>"},{"location":"architecture/#public-api-surface-srcdrawzero__init__py","title":"Public API surface (<code>src/drawzero/__init__.py</code>)","text":"<p>The package exposes a \u201cflat\u201d API meant to mimic turtle/pygame zero ergonomics. All drawing helpers are imported from <code>utils.draw</code>, while math helpers come from sibling modules:</p> <ul> <li>Drawing primitives: <code>line</code>, <code>circle</code>, <code>rect</code>, <code>polygon</code>, <code>text</code>, <code>image</code>, etc.</li> <li>Filled variants share the same renderer entry points by passing <code>line_width=0</code>.</li> <li>Animation and timing helpers: <code>tick</code>, <code>sleep</code>, <code>run</code>, <code>fps</code>, <code>quit</code>.</li> <li>Input helpers proxy the renderer\u2019s key/mouse state (<code>get_keys_pressed</code>, <code>keysdown</code>, <code>mousebuttonsdown</code>, ...).</li> <li>Utilities: <code>Pt</code> (vector/turtle hybrid), <code>Gradient</code>, <code>copy_examples</code>, color constants (<code>C</code>, <code>COLORS</code>, <code>ALL_COLORS</code>).</li> </ul> <p>Every user-facing function ultimately routes through the renderer stack described below.</p>"},{"location":"architecture/#rendering-pipeline-utilsdraw-utilsrenderer","title":"Rendering pipeline (<code>utils.draw</code> \u2192 <code>utils.renderer</code>)","text":"<p><code>utils.draw</code> performs argument validation and coercion before delegating to the actual drawing backend. Common steps for each primitive:</p> <ol> <li>Convert user-supplied data through converter helpers (<code>utils.converters</code>). These functions normalize coordinates, radii, rectangles, and colors, while collecting rich error messages via <code>BadDrawParmsError</code> and localized strings in <code>utils.i18n</code>.</li> <li>Choose the backend module depending on the <code>EJUDGE_MODE</code> environment variable. GUI builds import <code>utils.renderer</code> (pygame-based). Text-mode/CI builds fall back to <code>utils.renderer_ejudge</code>, which prints commands for automated judges.</li> <li>After the renderer call, update cached input event lists so that consumers see mouse/key positions in logical (virtual) coordinates.</li> </ol>"},{"location":"architecture/#utilsrenderer","title":"<code>utils.renderer</code>","text":"<p>The pygame renderer lazily creates a resizable window and keeps an off-screen copy to survive resizes. Important responsibilities:</p> <ul> <li>Surface management: <code>_create_surface()</code> defers window creation until the first drawing call; <code>_resize()</code> rescales existing content when SDL emits a resize event.</li> <li>Primitive drawing: each <code>draw_*</code> function handles optional alpha blending by drawing into temporary <code>pygame.Surface</code> buffers when needed.</li> <li>Event pump: <code>draw_tick()</code> advances the clock (30 FPS target), flushes the event queue, and populates global lists (<code>keysdown</code>, <code>mousebuttonsdown</code>, etc.) consumed by <code>utils.draw</code>.</li> <li>Lifecycle hooks: <code>atexit.register(_draw_go)</code> keeps the pygame loop alive until the process exits; <code>_init()</code> configures DPI-awareness on Windows and centers the window.</li> <li>Coordinate scaling: setter functions from <code>utils.screen_size</code> maintain the mapping between \u201cvirtual\u201d 1000\u00d71000 coordinates (used by the API) and the actual window size.</li> </ul>"},{"location":"architecture/#utilsrenderer_ejudge","title":"<code>utils.renderer_ejudge</code>","text":"<p>A lightweight stub used when <code>EJUDGE_MODE=true</code> (e.g., tests running without a GUI). It mirrors the renderer API but simply prints serialized drawing commands. Screen size is fixed to 1000\u00d71000 so coordinate conversion remains consistent.</p>"},{"location":"architecture/#coordinate-transforms-utilsscreen_size","title":"Coordinate transforms (<code>utils.screen_size</code>)","text":"<p>DrawZero always exposes a 1000\u00d71000 virtual canvas. <code>set_virtual_size()</code> can change that logical resolution, and <code>set_real_size()</code> is called by the renderer when it knows the real pixel size. The module exposes helpers to convert between coordinate spaces:</p> <ul> <li><code>to_canvas_x</code> / <code>to_canvas_y</code> \u2013 convert virtual coordinates to actual pixels.</li> <li><code>from_canvas_x</code> / <code>from_canvas_y</code> \u2013 convert back to logical coordinates (used when reporting mouse positions).</li> </ul> <p>All converters and event wrappers rely on this module, so adjust it carefully if supporting non-square canvases.</p>"},{"location":"architecture/#math-and-utility-helpers","title":"Math and utility helpers","text":"<ul> <li><code>utils.pt.Pt</code> implements a mutable 2D vector with turtle-style movement, arithmetic operators, and convenience methods (<code>forward</code>, <code>rotate_around</code>, <code>distance</code>, etc.). Examples rely on it for animation logic.</li> <li><code>utils.gradient.Gradient</code> constructs color ramps over a numeric domain (default 0\u20131). It uses the same converter/error infrastructure to provide consistent validation.</li> <li><code>utils.colors</code> exposes pygame\u2019s color table both as attribute access (<code>C.red</code>) and dictionaries (<code>COLORS</code>, <code>ALL_COLORS</code>).</li> <li><code>utils.key_flags</code> mirrors pygame key constants so code can use <code>K.&lt;name&gt;</code> even when pygame is absent (constants are loaded lazily when available).</li> <li><code>utils.copy_examples.copy_examples()</code> copies <code>src/drawzero/examples</code> into the current working directory; the CLI entry point calls it to bootstrap learners.</li> </ul>"},{"location":"architecture/#examples-srcdrawzeroexamples","title":"Examples (<code>src/drawzero/examples</code>)","text":"<p>Short, bilingual scripts demonstrate the API: drawing primitives, loops, animations, gradients, images, and simple interactive games. Tests import many of them to ensure they still execute, so keep side effects (e.g., infinite loops) behind guards if you add new ones.</p>"},{"location":"architecture/#tests-tests","title":"Tests (<code>tests/</code>)","text":"<ul> <li><code>test_examples_gui_mode.py</code> imports each example module to ensure it runs against the real renderer.</li> <li><code>test_examples_text_mode.py</code> sets <code>EJUDGE_MODE</code> and asserts the text renderer paths work.</li> <li>The remaining pytest modules cover specific utilities: converter validation, localized error messages, gradient interpolation, the <code>Pt</code> vector API, and <code>copy_examples()</code> behavior.</li> </ul> <p>Use these tests as references when extending validation logic or adding new primitives.</p>"},{"location":"examples/","title":"DrawZero examples","text":"<p> 00_hello_world.py<pre><code># Just import everything\n# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0451\nfrom drawzero import *\n\n# Red rectangle with upper left corner at (50, 150) and width = 900, height = 700\n# \u041a\u0440\u0430\u0441\u043d\u044b\u0439 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441 \u043b\u0435\u0432\u044b\u043c \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0443\u0433\u043b\u043e\u043c \u0432 \u0442\u043e\u0447\u043a\u0435(50, 150), \u0448\u0438\u0440\u0438\u043d\u043e\u0439 900 \u0438 \u0432\u044b\u0441\u043e\u0442\u043e\u0439 700\nrect('red', (50, 150), 900, 700)\n\n# Straight orange line from (100, 500) to (900, 500)\n# \u041e\u0440\u0430\u043d\u0436\u0435\u0432\u0430\u044f \u043f\u0440\u044f\u043c\u0430\u044f \u043b\u0438\u043d\u0438\u044f \u0438\u0437 \u0442\u043e\u0447\u043a\u0438 (100, 500) \u0432 \u0442\u043e\u0447\u043a\u0443 (900, 500)\nline('orange', (100, 500), (900, 500))\n\n# Centered text\n# \u0426\u0435\u043d\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442\ntext('green', 'Hello world!', (500, 250), fontsize=72)\ntext('blue', '\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!', (500, 750), fontsize=72)\n\n# Run loop\n# \u0417\u0430\u043f\u0443\u0441\u043a\nrun()\n</code></pre></p> <p> 01_grid_and_coordinates.py<pre><code>from drawzero import *\n\n# Canvas is always 1000\u00d71000\n# \u0420\u0430\u0437\u043c\u0435\u0440 \u0445\u043e\u043b\u0441\u0442\u0430 \u0432\u0441\u0435\u0433\u0434\u0430 1000\u00d71000\n\n# Coordinate grid\n# \u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u043d\u0430\u044f \u0441\u0435\u0442\u043a\u0430 \u0434\u043b\u044f \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u0440\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u044f\ngrid()\n\n# (100, 200) -&gt; (600, 800)\nline('red', (100, 200), (600, 800))\n\n# \u250c\u2500 at (600, 100), width=200, height=300\nfilled_rect('blue', (600, 100), 200, 300)\n\n# Center at (300, 800), radius = 50\ncircle('green', (300, 800), 50)\n\n# Center of text at (800, 600)\ntext('yellow', '(800, 600)', (800, 600))\n</code></pre></p>"},{"location":"examples_overview/","title":"Examples Overview","text":"<p>The <code>src/drawzero/examples</code> package contains runnable scripts that double as smoke tests and usage demonstrations. The table below highlights the intent of each script so you can pick a relevant starting point when troubleshooting or extending functionality.</p> File Focus Key ideas <code>00_hello_world.py</code> First canvas rendering Draws a bordered canvas, splits text into two languages, and starts the <code>run()</code> loop. <code>01_grid_and_coordinates.py</code> Coordinate system tour Renders the helper <code>grid()</code>, then annotates various primitives at known coordinates. <code>02_loops_and_rgb_colors.py</code> Loop-driven art Uses a <code>for</code> loop and random RGB tuples to paint vertical bars with varying heights. <code>03_simple_objects.py</code> Primitive catalog Demonstrates every drawing primitive (lines, circles, rotated rectangles, polygons, text alignment). <code>04_loops_sin_plot.py</code> Math plotting Plots a sine wave by stitching short line segments along the X axis. <code>05_points.py</code> <code>Pt</code> helper as vector/turtle Shows how the <code>Pt</code> class supports arithmetic, motion, and turtle-style rotation in loops. <code>06_turtle_style.py</code> Polygon drawing with <code>Pt</code> Rotates a <code>Pt</code> instance to build regular polygons for sides 3\u201310 using turtle operations. <code>07_animation_circles.py</code> Minimal animation loop Varies circle position, radius, and color over time while calling <code>tick()</code> each frame. <code>08_animation_traffic_light.py</code> State-based animation Reuses a helper to draw a traffic light and uses <code>sleep()</code> to cycle colors. <code>09_animation_rectangles.py</code> Complex animation Combines <code>Pt</code> math with rotation/orbit logic, transparency, and conditional effects. <code>10_animation_planets.py</code> Orbital motion Calculates circular motion for a planet/moon pair and redraws every frame. <code>11_transparency_and_line_width.py</code> Alpha blending and stroke widths Samples different alpha values and line widths across circles, rectangles, polygons, and ellipses. <code>12_images.py</code> Image rendering Loads <code>cat.png</code> from the examples folder, demonstrates scaling and alpha when blitting images. <code>13_gradients.py</code> Gradient helper Builds several <code>Gradient</code> scales and visualizes them through stacked rectangles. <code>14_animation_close_vertex.py</code> Proximity graph animation Moves random <code>Pt</code> nodes with wrap-around motion, draws lines between nearby pairs, and uses FPS overlay. <code>15_animation_firework.py</code> Particle system Implements <code>Particle</code> and <code>Firework</code> classes with physics updates, gradient-based glow, and clean-up logic. <code>16_keyboard_and_mouse.py</code> Input handling Reads key state arrays and event queues to move a square, track typed characters, and follow the mouse. <code>17_mouse_tube.py</code> Mouse trail effect Captures <code>mouse_pos()</code> each frame, grows concentric circles with a gradient as they age. <code>18_game_stars.py</code> 3D starfield mini-game Uses dataclasses, random stars, and WASD/QE controls to navigate through a pseudo-3D field. <code>19_game_colors.py</code> Reaction game Displays color words versus actual colors, handles mouse button choices with time penalties. <code>20_game_racing.py</code> Multiplayer mini-game Assigns distinct key bindings per car, scrolls a precomputed road, and keeps per-player scores. <code>99_errors.py</code> Error reporting demo Forces validation errors under <code>EJUDGE_MODE</code> to showcase localized diagnostics emitted by converters. <p>When adding new examples, keep them import-safe (tests import modules directly) and prefer finite loops or guard infinite loops with a <code>if __name__ == \"__main__\"</code> block.</p>"},{"location":"gradient/","title":"Gradient helper reference","text":"<p><code>Gradient</code> is a class that turns a number into a color. It lives in <code>drawzero.utils.gradient</code> and is available after <code>from drawzero import *</code>. Use it when you need smooth color transitions for temperature maps, progress bars, particle systems, or animated trails.</p> <p>This guide replaces the bare auto-doc block and explains the helper step by step. It also shows how to combine gradients with shapes from Drawing primitives, transparency tips from Transparency and line width, and animated loops from Animations.</p>"},{"location":"gradient/#quick-start","title":"Quick start","text":"<pre><code>from drawzero import *\n\nheat = Gradient([C.blue, C.cyan, C.yellow, C.red])\nprint(heat(0.0))   # (0, 0, 255) - first color\nprint(heat(0.5))   # (0, 255, 255) - middle color\nprint(heat(1.0))   # (255, 0, 0) - last color\n</code></pre> <ul> <li>The first argument is a list of colors. You can mix constants from <code>drawzero.utils.colors.C</code>, named strings (<code>'gold'</code>), or RGB tuples like <code>(34, 139, 34)</code>.</li> <li>By default the valid input range (the domain) goes from <code>0</code> to <code>1</code>.</li> <li>Passing a value smaller than the start clamps to the first color; bigger values clamp to the last color.</li> </ul>"},{"location":"gradient/#why-gradients-are-useful","title":"Why gradients are useful","text":"<ul> <li>Continuous shading \u2013 draw rectangles that fade from cold to hot numbers.</li> <li>Animated effects \u2013 change particle colors as they age.</li> <li>Status bars \u2013 map progress (0\u2013100) to a palette.</li> </ul> <p>Open the example <code>13_gradients.py</code> after reading this page. The file is also listed in the Examples overview.</p>"},{"location":"gradient/#constructing-a-gradient","title":"Constructing a gradient","text":"<pre><code>Gradient(color_list, start=0.0, end=1.0, *extra_domain_points)\n</code></pre> <ul> <li><code>color_list</code> must have at least two entries.</li> <li>If you pass only <code>start</code> and <code>end</code>, the helper spreads the colors evenly across that range.</li> <li>When you supply extra numbers, the helper sorts them automatically. The final domain always has the same length as <code>color_list</code>.</li> </ul>"},{"location":"gradient/#evenly-spaced-domain","title":"Evenly spaced domain","text":"<pre><code>heat = Gradient([C.blue, C.white, C.red], 0, 100)\nprint(heat(0))     # blue\nprint(heat(50))    # white\nprint(heat(100))   # red\n</code></pre> <p>The colors sit at 0, 50, and 100 because the list has three entries.</p>"},{"location":"gradient/#custom-positions-for-each-color","title":"Custom positions for each color","text":"<pre><code>mist = Gradient([C.black, 'purple', C.white], 0, 30, 100)\nprint(mist(10))   # dark purple\nprint(mist(60))   # pale purple near white\n</code></pre> <p>Here the palette stays dark longer because the middle color is close to the start of the domain.</p>"},{"location":"gradient/#using-raw-rgb-tuples","title":"Using raw RGB tuples","text":"<pre><code>sunrise = Gradient([(25, 25, 112), (255, 140, 0), (255, 215, 0)], -1, 1)\n</code></pre> <p>Any number outside <code>[-1, 1]</code> will clamp to the first or last tuple.</p>"},{"location":"gradient/#validation-rules","title":"Validation rules","text":"<p>If the domain points do not match the number of colors, <code>Gradient</code> raises <code>BadDrawParmsError</code>. The message suggests a fixed call such as <code>Gradient([C.red, C.green], 0, 100)</code>.</p>"},{"location":"gradient/#sampling-colors-inside-drawings","title":"Sampling colors inside drawings","text":"<p><code>Gradient</code> objects are callable. You can pass the result straight into the drawing helpers.</p> <pre><code>from drawzero import *\n\nglow = Gradient([C.black, C.blue, C.cyan, C.white])\n\nfor index in range(10):\n    color = glow(index / 9)   # 0.0 .. 1.0\n    filled_circle(color, (500, 500), 40 + index * 15)\n</code></pre> <p>Combine this with alpha values from Transparency and line width to create soft halos.</p>"},{"location":"gradient/#heat-map-rectangle-grid","title":"Heat map rectangle grid","text":"<pre><code>from drawzero import *\n\nheat = Gradient([C.darkblue, C.lawngreen, C.yellow, C.orangered], 0, 30)\ncell_size = 80\n\nfor row in range(5):\n    for col in range(5):\n        value = row * 5 + col  # pretend sensor reading\n        color = heat(value)\n        filled_rect(color, (100 + col * cell_size, 100 + row * cell_size), cell_size, cell_size)\n        text('white', f\"{value}\", (110 + col * cell_size, 110 + row * cell_size))\n</code></pre> <p>The helper clamps any number above <code>30</code> to the last color (<code>C.orangered</code>).</p>"},{"location":"gradient/#mapping-animation-progress-to-colors","title":"Mapping animation progress to colors","text":"<p>Gradients pair very well with the <code>tick()</code> loop from Animations.</p> <pre><code>from drawzero import *\n\ntrail = Gradient([C.white, C.skyblue, C.blue, C.navy])\nball = Pt(200, 500, heading=0)\n\nwhile tick():\n    clear()\n    for tail in range(20):\n        color = trail(tail / 19)\n        filled_circle(color, (ball.x - tail * 12, ball.y), 20 - tail)\n    ball.forward(5)\n    if ball.x &gt; 1000:\n        ball.goto(0, ball.y)\n</code></pre> <p>The gradient gives darker colors for older trail segments while the point keeps moving.</p>"},{"location":"gradient/#understanding-interpolation","title":"Understanding interpolation","text":"<p>Between two domain values the helper blends color channels linearly:</p> <pre><code>channel = left_channel * (right_x - current_x) / diff + right_channel * (current_x - left_x) / diff\n</code></pre> <p>Each channel (<code>R</code>, <code>G</code>, <code>B</code>) is rounded to the nearest integer. You normally do not need to worry about this math, but it helps explain why gradients produce smooth steps even when the domain spacing is uneven.</p>"},{"location":"gradient/#tips-and-troubleshooting","title":"Tips and troubleshooting","text":"<ul> <li>Domain must be sorted. The helper sorts your numbers automatically, but passing mixed strings and numbers triggers an error message.</li> <li>Short palettes need matching domain length. Two colors work with two domain points. Three colors need three points, and so on.</li> <li>Re-use gradients. Store the object once (e.g. <code>heat = Gradient(...)</code>) and call it many times per frame instead of creating new gradients inside loops.</li> <li>Combine with alpha. Use the <code>alpha</code> keyword from Transparency and line width to fade shapes even more.</li> <li>Test in the shell. Gradients have a readable <code>repr</code>, so printing them helps during debugging.</li> </ul> <pre><code>heat = Gradient([C.blue, C.white, C.red], 0, 100)\nprint(heat)\n# Gradient([(0, 0, 255), (255, 255, 255), (255, 0, 0)], 0, 50.0, 100)\n</code></pre>"},{"location":"gradient/#where-to-read-more","title":"Where to read more","text":"<ul> <li>Drawing primitives \u2013 shows every function that accepts colors.</li> <li>Pt helper \u2013 use moving points together with gradients for animated trails.</li> <li>Examples overview \u2013 find <code>13_gradients.py</code> plus other scripts that mix gradients with motion.</li> <li>Architecture notes \u2013 quick summary of how utility helpers (including <code>Gradient</code>) fit into the project.</li> </ul> <p>Try creating your own palette, then feed its colors into shapes, particle effects, or HUD elements. Small experiments make the gradient rules stick quickly.</p>"},{"location":"images/","title":"Working with images","text":"<p>This guide shows how to draw pictures on the canvas with the <code>image()</code> helper. It uses simple English and many examples so that high school students who are not native English speakers can follow every step.</p>"},{"location":"images/#function-signature-at-a-glance","title":"Function signature at a glance","text":"<pre><code>from drawzero import image\n\nimage(image, pos, width: int = None, alpha=255)\n</code></pre> <p>The four parameters control what file is loaded, where it appears, how wide it becomes, and how transparent it looks.</p> Parameter What it means Required? Typical values <code>image</code> Path to the picture file (for example <code>'cat.png'</code> or <code>this_file_dir / 'cat.png'</code>) Yes PNG, JPG, or other formats that <code>pygame</code> can open <code>pos</code> Top-left corner of where the picture will be drawn on the canvas Yes <code>(x, y)</code> tuples like <code>(100, 200)</code> <code>width</code> Desired width on the canvas. Height changes automatically to keep the same shape. No Whole numbers such as <code>200</code> or <code>350</code> <code>alpha</code> Transparency. <code>255</code> is fully solid, <code>0</code> is invisible. No Numbers between <code>0</code> and <code>255</code> <p>\u2139\ufe0f If you want a deeper explanation of transparency, read Transparency (<code>alpha</code>) and line thickness (<code>line_width</code>).</p>"},{"location":"images/#parameter-by-parameter","title":"Parameter by parameter","text":""},{"location":"images/#image-choose-the-file-to-draw","title":"<code>image</code>: choose the file to draw","text":"<ul> <li>Accepts strings with file names, absolute paths, or <code>pathlib.Path</code> objects.</li> <li>Relative paths are resolved from the Python file that calls <code>image()</code>. A safe pattern is:   <pre><code>from pathlib import Path\nthis_file_dir = Path(__file__).resolve().parent\nimage(this_file_dir / 'pictures' / 'cat.png', (100, 100))\n</code></pre></li> <li>PNG images keep their transparent background. JPG files ignore transparent pixels because the format does not store them.</li> <li>Large images are fine, but very big files slow down loading. For games or animations, keep images under 2000\u00d72000 pixels if possible.</li> </ul> <p>Common mistakes</p> <ul> <li>Typing a wrong folder name. Fix it by printing the full path and checking if the file exists.</li> <li>Forgetting the file extension (<code>.png</code>, <code>.jpg</code>, <code>.gif</code>).</li> <li>Using backslashes (<code>\\</code>) on Windows inside normal strings. Either use raw strings (<code>r'images\\\\cat.png'</code>) or forward slashes (<code>'images/cat.png'</code>).</li> </ul>"},{"location":"images/#pos-place-the-image-on-the-canvas","title":"<code>pos</code>: place the image on the canvas","text":"<ul> <li>The canvas uses the same 1000\u00d71000 virtual coordinate system as the shape primitives.</li> <li><code>(0, 0)</code> is the top-left corner. Increasing <code>x</code> moves the picture to the right. Increasing <code>y</code> moves it down.</li> <li><code>pos</code> can be a tuple, list, or a <code>Pt</code> object.</li> <li>The coordinates represent the top-left corner of the image. If you want to center the picture, subtract half of its width and height:   <pre><code>image('badge.png', (500 - 128, 500 - 128))\n</code></pre></li> <li><code>image()</code> will round the numbers to the nearest pixel. Decimals are allowed, but they are converted to integers internally.</li> </ul>"},{"location":"images/#width-control-the-size-without-breaking-proportions","title":"<code>width</code>: control the size without breaking proportions","text":"<ul> <li>Leave it as <code>None</code> to keep the original size of the file.</li> <li>Pass a positive integer to scale the image horizontally. The helper automatically calculates the matching height so the picture does not look stretched.</li> <li>The value is measured in virtual canvas units. With the default 1000\u00d71000 window, <code>width=200</code> shows the image 200 pixels wide.</li> <li>Set <code>width</code> to the same value for all frames in an animation to avoid flickering.</li> <li>You can compute the width dynamically. For example, to scale by 50%:   <pre><code>original_width = 400\nimage('robot.png', (300, 400), width=original_width // 2)\n</code></pre></li> <li>Passing <code>0</code> or a negative value will raise a <code>BadDrawParmsError</code>. Always use a positive integer.</li> </ul>"},{"location":"images/#alpha-blend-images-with-the-background","title":"<code>alpha</code>: blend images with the background","text":"<ul> <li>Accepts integers from <code>0</code> (fully transparent) to <code>255</code> (fully opaque).</li> <li>The default value <code>255</code> draws the picture with no extra transparency.</li> <li>Use mid-range values (for example <code>128</code>) to create soft shadows, glass effects, or hints of motion.</li> <li>The alpha value applies to the entire image. Per-pixel transparency stored in PNG files still works and is multiplied by this value.</li> <li>Read the full guide on transparency to see layered examples and mixing tips.</li> </ul>"},{"location":"images/#step-by-step-examples","title":"Step-by-step examples","text":""},{"location":"images/#example-1-show-a-mascot-in-the-corner","title":"Example 1 \u2013 show a mascot in the corner","text":"<pre><code>from drawzero import *\n\nfill('white')\nimage('mascot.png', (50, 50))\n</code></pre> <p>The mascot keeps its original size. The white background makes the colors easy to see.</p>"},{"location":"images/#example-2-center-an-image-and-scale-it-to-a-fixed-width","title":"Example 2 \u2013 center an image and scale it to a fixed width","text":"<pre><code>from drawzero import *\nfrom pathlib import Path\n\nthis_file_dir = Path(__file__).resolve().parent\nlogo_path = this_file_dir / 'assets' / 'school_logo.png'\n\n# Draw the logo 300 units wide and keep it centered on the canvas\nlogo_width = 300\nlogo_x = 500 - logo_width // 2\nlogo_y = 300\nimage(logo_path, (logo_x, logo_y), width=logo_width)\n</code></pre> <p>This snippet works even if you move the script to another computer, because the path is built relative to the file location.</p>"},{"location":"images/#example-3-ghost-trail-using-alpha","title":"Example 3 \u2013 ghost trail using alpha","text":"<pre><code>from drawzero import *\n\nfill('black')\nfor step in range(5):\n    image('spaceship.png', (150 + step * 80, 400), width=200, alpha=255 - step * 40)\n</code></pre> <p>The loop draws five copies of the same image. Each copy is more transparent than the previous one, creating a motion trail.</p>"},{"location":"images/#example-4-responsive-width-based-on-the-window-size","title":"Example 4 \u2013 responsive width based on the window size","text":"<pre><code>from drawzero import *\n\nfill((10, 10, 40))\nwindow_width = 800  # imagine we measured the real window\npicture_width = int(window_width * 0.6)\nimage('city.png', (100, 200), width=picture_width)\n</code></pre> <p>Because the width is calculated in code, you can adapt it to different screen sizes.</p>"},{"location":"images/#checklist-before-calling-image","title":"Checklist before calling <code>image()</code>","text":"<ol> <li>Place your picture file in the project folder (for example <code>docs/</code> or <code>assets/</code>).</li> <li>Confirm the Python script can reach the file path (print it if needed).</li> <li>Decide the placement coordinates. Use <code>grid()</code> from DrawZero if you need help visualizing positions.</li> <li>Choose a width or leave it as <code>None</code>.</li> <li>Decide whether you need extra transparency.</li> <li>Only then call <code>image()</code>.</li> </ol>"},{"location":"images/#troubleshooting-guide","title":"Troubleshooting guide","text":"Problem Likely cause How to fix <code>BadDrawParmsError: bad coords</code> The <code>pos</code> argument is not a two-number tuple or list. Make sure you pass <code>(x, y)</code> with numbers. <code>No file '...' found in working directory</code> The image path is wrong. Print <code>Path(image).resolve()</code> and verify the file exists there. Image looks stretched You set both <code>width</code> and <code>height</code>. Only <code>width</code> should be supplied. Remove any manual height scaling. DrawZero calculates it for you. Image is very blurry You scaled a tiny picture to a huge size. Start with a higher-resolution file or reduce the target width. Transparent PNG looks too solid You used <code>alpha=255</code>. Lower the alpha value to let the background show through. <p>With these tips you can confidently display images and combine them with the drawing primitives.</p>"},{"location":"installation/","title":"Installation","text":"<p>In a Terminal window, type: <pre><code>pip install drawzero --upgrade --user\n</code></pre></p> <p>Or run the following program:</p> <pre><code>import os, sys\npython = sys.executable\nuser = '--user' if 'venv' not in python and 'virtualenvs' not in python else ''\ncmd = f'\"{python}\" -m pip install drawzero --upgrade {user}'\nos.system(cmd)\nfrom drawzero import *\n</code></pre>"},{"location":"keyboard_and_mouse_input/","title":"Keyboard and mouse input","text":"<p>This page explains how to read keyboard and mouse input when you build an interactive drawing with DrawZero. It uses simple English and many examples so that you can follow every step.</p>"},{"location":"keyboard_and_mouse_input/#why-we-need-an-event-loop","title":"Why we need an event loop","text":"<p>Real-time programs must check for new events many times per second. You can see this pattern in almost every game or animation. The main loop looks like this:</p> <pre><code>while True:\n    tick()          # update animations, timers, physics\n    # process events # read keyboard and mouse state here\n</code></pre> <p><code>tick()</code> comes from DrawZero helpers (see the Animation basics page). It advances time and asks the renderer to collect new input events. After each <code>tick()</code> you can safely read the keyboard and mouse lists described on this page.</p> <p>If you stop calling <code>tick()</code>, the window freezes and no fresh input arrives. This is why you must keep the loop running even when nothing happens yet.</p>"},{"location":"keyboard_and_mouse_input/#understanding-input-helpers","title":"Understanding input helpers","text":"<p>The renderer records two kinds of information:</p> <ol> <li>Current state \u2013 which keys or mouse buttons are held down right now.</li> <li>Event queues \u2013 a history of what changed during the last frame.</li> </ol> <p>State helpers are good for continuous actions (for example, holding the left arrow to move a sprite). Event queues are better when you need one-time actions (for example, detecting that a key was pressed once to open a menu).</p> <p>All helpers live on the global <code>renderer</code> object. Import them from <code>drawzero.renderer</code> or access them through <code>utils.draw</code> depending on the script style you picked (see Architecture overview).</p>"},{"location":"keyboard_and_mouse_input/#snapshot-helpers","title":"Snapshot helpers","text":""},{"location":"keyboard_and_mouse_input/#get_keys_pressed-rendererget_keys_pressed","title":"<code>get_keys_pressed = renderer.get_keys_pressed</code>","text":"<p>Returns a set of strings with the names of all keys that are currently held down. Use it when you only care whether a key is down, not how many times it was pressed.</p> <pre><code>from drawzero.renderer import get_keys_pressed\n\npressed = get_keys_pressed()\nif \"LEFT\" in pressed:\n    player_x -= 5\nif \"SPACE\" in pressed:\n    player_jump()\n</code></pre> <p><code>get_keys_pressed()</code> is re-evaluated on each call, so ask for it after <code>tick()</code>. It uses the same key names that appear in the event queues described below.</p>"},{"location":"keyboard_and_mouse_input/#keys_mods_pressed-rendererkeys_mods_pressed","title":"<code>keys_mods_pressed = renderer.keys_mods_pressed</code>","text":"<p>Returns a set of modifier names like <code>\"SHIFT\"</code>, <code>\"CTRL\"</code>, or <code>\"ALT\"</code>. This is useful when you want to support shortcuts such as <code>Ctrl+S</code>.</p> <pre><code>if \"CTRL\" in keys_mods_pressed() and \"S\" in get_keys_pressed():\n    save_project()\n</code></pre> <p>Modifiers are separated from regular keys so you can check them quickly without searching inside the full key set.</p>"},{"location":"keyboard_and_mouse_input/#get_mouse_pressed-rendererget_mouse_pressed","title":"<code>get_mouse_pressed = renderer.get_mouse_pressed</code>","text":"<p>Returns a set of mouse button names such as <code>\"LEFT\"</code>, <code>\"MIDDLE\"</code>, and <code>\"RIGHT\"</code>. Combine it with the current mouse position from your canvas helpers (see Drawing primitives for coordinate utilities).</p> <pre><code>if \"LEFT\" in get_mouse_pressed():\n    draw_circle(mouse_pos(), radius=10)\n</code></pre> <p>Remember: this only reports buttons that are held during the latest frame. You still need the event queues to detect the exact click moment.</p>"},{"location":"keyboard_and_mouse_input/#event-queues","title":"Event queues","text":"<p>Event queues are lists that reset on every <code>tick()</code>. They keep the order of incoming events so you can replay what happened during the last frame.</p> <p>Each item inside the queue is a small object (usually a <code>namedtuple</code> or a simple class) with fields like <code>key</code>, <code>mod</code>, <code>button</code>, <code>pos</code>, or <code>rel</code>. You can inspect them with <code>print(event)</code> to learn the exact structure.</p>"},{"location":"keyboard_and_mouse_input/#keysdown-rendererkeysdown","title":"<code>keysdown = renderer.keysdown</code>","text":"<p>Contains a list of key-down events. Each event fires when a key changes from \"up\" to \"down\". Use it for single presses.</p> <pre><code>for event in keysdown:\n    if event.key == \"SPACE\":\n        spawn_bullet()\n</code></pre> <p>This queue is empty when no new key press happened in the current frame.</p>"},{"location":"keyboard_and_mouse_input/#keysup-rendererkeysup","title":"<code>keysup = renderer.keysup</code>","text":"<p>Contains a list of key-up events. These events fire when a key is released. They are useful for toggles or for stopping an action exactly when the player lets go.</p> <pre><code>for event in keysup:\n    if event.key == \"LEFT\":\n        stop_moving()\n</code></pre>"},{"location":"keyboard_and_mouse_input/#mousemotions-renderermousemotions","title":"<code>mousemotions = renderer.mousemotions</code>","text":"<p>Contains a list of mouse motion events. Every event has at least a <code>pos</code> attribute with the current cursor position in logical (virtual) coordinates, and usually a <code>rel</code> attribute with the movement delta.</p> <pre><code>for event in mousemotions:\n    trail.add_point(event.pos)\n</code></pre> <p>Read Images and coordinate systems to learn how logical positions map to your canvas.</p>"},{"location":"keyboard_and_mouse_input/#mousebuttonsdown-renderermousebuttonsdown","title":"<code>mousebuttonsdown = renderer.mousebuttonsdown</code>","text":"<p>Contains a list of mouse button down events. They fire when the user presses any mouse button. Events include the button name and the mouse position.</p> <pre><code>for event in mousebuttonsdown:\n    if event.button == \"LEFT\":\n        start_drag(event.pos)\n</code></pre>"},{"location":"keyboard_and_mouse_input/#mousebuttonsup-renderermousebuttonsup","title":"<code>mousebuttonsup = renderer.mousebuttonsup</code>","text":"<p>Contains a list of mouse button up events. They fire when the user releases any mouse button. Use them to finish actions like drawing a line or confirming a selection.</p> <pre><code>for event in mousebuttonsup:\n    if event.button == \"LEFT\":\n        end_drag(event.pos)\n</code></pre>"},{"location":"keyboard_and_mouse_input/#putting-it-all-together","title":"Putting it all together","text":"<p>Here is a full loop that uses both state and event helpers.</p> <pre><code>from drawzero import renderer\nfrom drawzero import utils\n\nwhile True:\n    utils.tick()\n\n    # continuous movement\n    pressed = renderer.get_keys_pressed()\n    if \"LEFT\" in pressed:\n        player.move(-5, 0)\n    if \"RIGHT\" in pressed:\n        player.move(5, 0)\n\n    # one-time actions\n    for event in renderer.keysdown:\n        if event.key == \"SPACE\":\n            player.jump()\n\n    for event in renderer.mousebuttonsdown:\n        if event.button == \"LEFT\":\n            player.shoot(event.pos)\n\n    # update the canvas here (see Animation basics for draw calls)\n</code></pre> <p>You can compare this pattern with the <code>16_keyboard_and_mouse.py</code> example listed in the Examples overview. That script also demonstrates how to combine keyboard input with on-screen feedback.</p>"},{"location":"keyboard_and_mouse_input/#tips-for-smooth-interaction","title":"Tips for smooth interaction","text":"<ul> <li>Call <code>tick()</code> regularly. A typical DrawZero animation runs 30 times per   second, but the helpers work at any speed.</li> <li>Avoid long blocking code (like <code>time.sleep(5)</code>) inside the loop. Put heavy   work into small slices or background threads if needed.</li> <li>If you only need the latest mouse position, keep the last item from   <code>mousemotions</code> or use utility functions such as <code>utils.draw.mouse_pos()</code>.</li> <li>Always test on real hardware. Touchpads, gaming mice, and keyboards with   non-English layouts can send different button names. Print events while   developing to see the actual data.</li> <li>Combine modifier checks (<code>keys_mods_pressed</code>) with regular keys to create   shortcuts that feel natural to users.</li> </ul>"},{"location":"keyboard_and_mouse_input/#where-to-learn-more","title":"Where to learn more","text":"<ul> <li>Animation basics explains how <code>tick()</code> fits inside the drawing   pipeline.</li> <li>Architecture overview shows how input helpers connect to   the renderer internals.</li> <li>Examples overview points to ready-made scripts you can   run and modify.</li> <li>The <code>keyboard_and_mouse_events.gif</code> image in the docs folder gives a quick   visual preview of what you can build.</li> </ul> <p>With these tools you can capture keyboard and mouse events reliably and build responsive, interactive scenes in DrawZero.</p>"},{"location":"primitives/","title":"Drawing primitives","text":"<p>This page shows how to use the most common drawing helpers in DrawZero. The goal is to help you make nice sketches even if you are new to programming. We will focus on color names, points, and shapes. Read Transparency (<code>alpha</code>) and line thickness (<code>line_width</code>) when you want to control see-through effects or stroke sizes.</p> <p>If you want to move a point around with turtle-style steps, open the Pt helper reference. For smooth color transitions or animated trails, check the Gradient helper reference.</p> <p>Once you feel comfortable drawing static shapes, jump to the Animations guide. It explains how to put your drawings inside the frame loop, control the speed with <code>tick()</code>, and even make motion trails.</p> <p>Each example starts with the same import:</p> <pre><code>from drawzero import *\n</code></pre> <p>After the import you can call the functions one by one. The virtual canvas is 1000 by 1000 units. Coordinates are always written as <code>(x, y)</code>.</p>"},{"location":"primitives/#named-colors-for-quick-sketches","title":"Named colors for quick sketches","text":"<p>You can pass the color as a short text such as <code>'red'</code>, <code>'white'</code>, <code>'black'</code>, <code>'gold'</code>, <code>'skyblue'</code>, and many other names. The library understands hundreds of names and converts them to the right RGB values for you.</p>"},{"location":"primitives/#linecolorred-start100-100-end200-200-args","title":"<code>line(color='red', start=(100, 100), end=(200, 200), *args)</code>","text":"<p>Draws a straight segment from the start point to the end point.</p> <p>Tips</p> <ul> <li><code>start</code> and <code>end</code> are coordinate pairs. <code>(0, 0)</code> is the top-left corner, <code>(1000, 1000)</code> is the bottom-right corner.</li> <li>The default line is red from <code>(100, 100)</code> to <code>(200, 200)</code>.</li> </ul> <p>Example \u2013 diagonal line in white</p> <pre><code>from drawzero import *\n\nline('white', (0, 0), (1000, 1000))\n</code></pre> <p>This draws a thin white line from the top-left corner to the bottom-right corner.</p> <p>Example \u2013 crosshair in cyan</p> <pre><code>from drawzero import *\n\nline('cyan', (500, 0), (500, 1000))\nline('cyan', (0, 500), (1000, 500))\n</code></pre> <p>The two calls create a vertical and a horizontal line that meet at the center.</p>"},{"location":"primitives/#circlecolorred-pos100-100-radius10-args","title":"<code>circle(color='red', pos=(100, 100), radius=10, *args)</code>","text":"<p>Draws the outline of a circle.</p> <p>Tips</p> <ul> <li><code>pos</code> is the center point of the circle.</li> <li><code>radius</code> is how far the circle extends from the center in canvas units.</li> </ul> <p>Example \u2013 blue ring around a point</p> <pre><code>from drawzero import *\n\ncircle('blue', (300, 300), 80)\n</code></pre> <p>Example \u2013 three concentric circles</p> <pre><code>from drawzero import *\n\ncenter = (750, 200)\ncircle('orange', center, 40)\ncircle('white', center, 80)\ncircle('green', center, 120)\n</code></pre>"},{"location":"primitives/#filled_circlecolorred-pos100-100-radius10-args","title":"<code>filled_circle(color='red', pos=(100, 100), radius=10, *args)</code>","text":"<p>Draws a circle filled with the chosen color.</p> <p>Example \u2013 traffic light dots</p> <pre><code>from drawzero import *\n\nx = 200\nfilled_circle('red', (x, 200), 60)\nfilled_circle('yellow', (x, 400), 60)\nfilled_circle('green', (x, 600), 60)\n</code></pre> <p>Example \u2013 sun with a face</p> <pre><code>from drawzero import *\n\nfilled_circle('gold', (800, 200), 100)\nfilled_circle('black', (760, 170), 10)\nfilled_circle('black', (840, 170), 10)\nline('black', (760, 240), (840, 240))\n</code></pre> <p>The last <code>line</code> reuses the knowledge from the previous section to draw a simple smile.</p>"},{"location":"primitives/#colors-as-rgb-triples","title":"Colors as RGB triples","text":"<p>Sometimes you want a very specific shade that does not have a name. In that case you can pass a tuple <code>(R, G, B)</code> where each value goes from <code>0</code> to <code>255</code>. <code>(255, 0, 0)</code> is pure red, <code>(0, 255, 0)</code> is pure green, <code>(0, 0, 255)</code> is pure blue. Mixing values gives new colors.</p>"},{"location":"primitives/#rectcolorred-pos100-100-width500-height200-args","title":"<code>rect(color='red', pos=(100, 100), width=500, height=200, *args)</code>","text":"<p>Draws only the border of a rectangle.</p> <ul> <li><code>pos</code> is the top-left corner of the rectangle.</li> <li><code>width</code> stretches the rectangle to the right.</li> <li><code>height</code> stretches it downward.</li> </ul> <p>Example \u2013 teal frame using RGB</p> <pre><code>from drawzero import *\n\nrect((0, 128, 128), (100, 100), 300, 200)\n</code></pre> <p>Example \u2013 picture frame around a filled area</p> <pre><code>from drawzero import *\n\nfilled_rect((240, 230, 140), (200, 200), 400, 300)\nrect((139, 69, 19), (200, 200), 400, 300)\n</code></pre> <p>The first call paints the background. The second call, using <code>rect</code>, keeps only the outline.</p>"},{"location":"primitives/#filled_rectcolorred-pos100-100-width500-height200-args","title":"<code>filled_rect(color='red', pos=(100, 100), width=500, height=200, *args)</code>","text":"<p>Draws a solid rectangle.</p> <p>Example \u2013 basic HUD panel</p> <pre><code>from drawzero import *\n\nfilled_rect((30, 30, 30), (50, 50), 300, 150)\ntext('white', 'Score: 1200', (70, 90))\n</code></pre> <p>Example \u2013 checkerboard tile</p> <pre><code>from drawzero import *\n\nfor row in range(4):\n    for col in range(4):\n        color = (255, 255, 255) if (row + col) % 2 == 0 else (0, 0, 0)\n        filled_rect(color, (100 + col * 60, 100 + row * 60), 60, 60)\n</code></pre> <p>This loops over 16 squares and chooses white or black using the RGB tuples.</p>"},{"location":"primitives/#color-helper-constant-c","title":"Color helper constant <code>C</code>","text":"<p>You can also import the special object <code>C</code> that contains every named color as an attribute. This works great in modern IDEs: typing <code>C.</code> shows a dropdown list of color names, and the IDE can warn you when the name is wrong.</p> <pre><code>from drawzero import C, line\n\nline(C.lightskyblue, (100, 500), (900, 500))\n</code></pre> <p>If you prefer, you can import both styles together:</p> <pre><code>from drawzero import *, C\nfilled_circle(C.magenta, (500, 500), 120)\n</code></pre> Full list of named colors available through <code>C</code> (665 items)  | Column 1 | Column 2 | Column 3 | Column 4 | Column 5 | | --- | --- | --- | --- | --- | | aliceblue | firebrick | grey4 | lemonchiffon3 | palevioletred4 | | antiquewhite | firebrick1 | grey5 | lemonchiffon4 | papayawhip | | antiquewhite1 | firebrick2 | grey6 | lightblue | peachpuff | | antiquewhite2 | firebrick3 | grey7 | lightblue1 | peachpuff1 | | antiquewhite3 | firebrick4 | grey8 | lightblue2 | peachpuff2 | | antiquewhite4 | floralwhite | grey9 | lightblue3 | peachpuff3 | | aqua | forestgreen | grey10 | lightblue4 | peachpuff4 | | aquamarine | fuchsia | grey11 | lightcoral | peru | | aquamarine1 | gainsboro | grey12 | lightcyan | pink | | aquamarine2 | ghostwhite | grey13 | lightcyan1 | pink1 | | aquamarine3 | gold | grey14 | lightcyan2 | pink2 | | aquamarine4 | gold1 | grey15 | lightcyan3 | pink3 | | azure | gold2 | grey16 | lightcyan4 | pink4 | | azure1 | gold3 | grey17 | lightgoldenrod | plum | | azure3 | gold4 | grey18 | lightgoldenrod1 | plum1 | | azure2 | goldenrod | grey19 | lightgoldenrod2 | plum2 | | azure4 | goldenrod1 | grey20 | lightgoldenrod3 | plum3 | | beige | goldenrod2 | grey21 | lightgoldenrod4 | plum4 | | bisque | goldenrod3 | grey22 | lightgoldenrodyellow | powderblue | | bisque1 | goldenrod4 | grey23 | lightgray | purple | | bisque2 | gray | grey24 | lightgreen | purple1 | | bisque3 | gray0 | grey25 | lightgrey | purple2 | | bisque4 | gray1 | grey26 | lightpink | purple3 | | black | gray2 | grey27 | lightpink1 | purple4 | | blanchedalmond | gray3 | grey28 | lightpink2 | red | | blue | gray4 | grey29 | lightpink3 | red1 | | blue1 | gray5 | grey30 | lightpink4 | red2 | | blue2 | gray6 | grey31 | lightsalmon | red3 | | blue3 | gray7 | grey32 | lightsalmon1 | red4 | | blue4 | gray8 | grey33 | lightsalmon2 | rosybrown | | blueviolet | gray9 | grey34 | lightsalmon3 | rosybrown1 | | brown | gray10 | grey35 | lightsalmon4 | rosybrown2 | | brown1 | gray11 | grey36 | lightseagreen | rosybrown3 | | brown2 | gray12 | grey37 | lightskyblue | rosybrown4 | | brown3 | gray13 | grey38 | lightskyblue1 | royalblue | | brown4 | gray14 | grey39 | lightskyblue2 | royalblue1 | | burlywood | gray15 | grey40 | lightskyblue3 | royalblue2 | | burlywood1 | gray16 | grey41 | lightskyblue4 | royalblue3 | | burlywood2 | gray17 | grey42 | lightslateblue | royalblue4 | | burlywood3 | gray18 | grey43 | lightslategray | salmon | | burlywood4 | gray19 | grey44 | lightslategrey | salmon1 | | cadetblue | gray20 | grey45 | lightsteelblue | salmon2 | | cadetblue1 | gray21 | grey46 | lightsteelblue1 | salmon3 | | cadetblue2 | gray22 | grey47 | lightsteelblue2 | salmon4 | | cadetblue3 | gray23 | grey48 | lightsteelblue3 | saddlebrown | | cadetblue4 | gray24 | grey49 | lightsteelblue4 | sandybrown | | chartreuse | gray25 | grey50 | lightyellow | seagreen | | chartreuse1 | gray26 | grey51 | lightyellow1 | seagreen1 | | chartreuse2 | gray27 | grey52 | lightyellow2 | seagreen2 | | chartreuse3 | gray28 | grey53 | lightyellow3 | seagreen3 | | chartreuse4 | gray29 | grey54 | lightyellow4 | seagreen4 | | chocolate | gray30 | grey55 | linen | seashell | | chocolate1 | gray31 | grey56 | lime | seashell1 | | chocolate2 | gray32 | grey57 | limegreen | seashell2 | | chocolate3 | gray33 | grey58 | magenta | seashell3 | | chocolate4 | gray34 | grey59 | magenta1 | seashell4 | | coral | gray35 | grey60 | magenta2 | sienna | | coral1 | gray36 | grey61 | magenta3 | sienna1 | | coral2 | gray37 | grey62 | magenta4 | sienna2 | | coral3 | gray38 | grey63 | maroon | sienna3 | | coral4 | gray39 | grey64 | maroon1 | sienna4 | | cornflowerblue | gray40 | grey65 | maroon2 | silver | | cornsilk | gray41 | grey66 | maroon3 | skyblue | | cornsilk1 | gray42 | grey67 | maroon4 | skyblue1 | | cornsilk2 | gray43 | grey68 | mediumaquamarine | skyblue2 | | cornsilk3 | gray44 | grey69 | mediumblue | skyblue3 | | cornsilk4 | gray45 | grey70 | mediumorchid | skyblue4 | | crimson | gray46 | grey71 | mediumorchid1 | slateblue | | cyan | gray47 | grey72 | mediumorchid2 | slateblue1 | | cyan1 | gray48 | grey73 | mediumorchid3 | slateblue2 | | cyan2 | gray49 | grey74 | mediumorchid4 | slateblue3 | | cyan3 | gray50 | grey75 | mediumpurple | slateblue4 | | cyan4 | gray51 | grey76 | mediumpurple1 | slategray | | darkblue | gray52 | grey77 | mediumpurple2 | slategray1 | | darkcyan | gray53 | grey78 | mediumpurple3 | slategray2 | | darkgoldenrod | gray54 | grey79 | mediumpurple4 | slategray3 | | darkgoldenrod1 | gray55 | grey80 | mediumseagreen | slategray4 | | darkgoldenrod2 | gray56 | grey81 | mediumslateblue | slategrey | | darkgoldenrod3 | gray57 | grey82 | mediumspringgreen | snow | | darkgoldenrod4 | gray58 | grey83 | mediumturquoise | snow1 | | darkgray | gray59 | grey84 | mediumvioletred | snow2 | | darkgreen | gray60 | grey85 | midnightblue | snow3 | | darkgrey | gray61 | grey86 | mintcream | snow4 | | darkkhaki | gray62 | grey87 | mistyrose | springgreen | | darkmagenta | gray63 | grey88 | mistyrose1 | springgreen1 | | darkolivegreen | gray64 | grey89 | mistyrose2 | springgreen2 | | darkolivegreen1 | gray65 | grey90 | mistyrose3 | springgreen3 | | darkolivegreen2 | gray66 | grey91 | mistyrose4 | springgreen4 | | darkolivegreen3 | gray67 | grey92 | moccasin | steelblue | | darkolivegreen4 | gray68 | grey93 | navajowhite | steelblue1 | | darkorange | gray69 | grey94 | navajowhite1 | steelblue2 | | darkorange1 | gray70 | grey95 | navajowhite2 | steelblue3 | | darkorange2 | gray71 | grey96 | navajowhite3 | steelblue4 | | darkorange3 | gray72 | grey97 | navajowhite4 | tan | | darkorange4 | gray73 | grey98 | navy | tan1 | | darkorchid | gray74 | grey99 | navyblue | tan2 | | darkorchid1 | gray75 | grey100 | oldlace | tan3 | | darkorchid2 | gray76 | honeydew | olive | tan4 | | darkorchid3 | gray77 | honeydew1 | olivedrab | teal | | darkorchid4 | gray78 | honeydew2 | olivedrab1 | thistle | | darkred | gray79 | honeydew3 | olivedrab2 | thistle1 | | darksalmon | gray80 | honeydew4 | olivedrab3 | thistle2 | | darkseagreen | gray81 | hotpink | olivedrab4 | thistle3 | | darkseagreen1 | gray82 | hotpink1 | orange | thistle4 | | darkseagreen2 | gray83 | hotpink2 | orange1 | tomato | | darkseagreen3 | gray84 | hotpink3 | orange2 | tomato1 | | darkseagreen4 | gray85 | hotpink4 | orange3 | tomato2 | | darkslateblue | gray86 | indianred | orange4 | tomato3 | | darkslategray | gray87 | indianred1 | orangered | tomato4 | | darkslategray1 | gray88 | indianred2 | orangered1 | turquoise | | darkslategray2 | gray89 | indianred3 | orangered2 | turquoise1 | | darkslategray3 | gray90 | indianred4 | orangered3 | turquoise2 | | darkslategray4 | gray91 | indigo | orangered4 | turquoise3 | | darkslategrey | gray92 | ivory | orchid | turquoise4 | | darkturquoise | gray93 | ivory1 | orchid1 | violet | | darkviolet | gray94 | ivory2 | orchid2 | violetred | | deeppink | gray95 | ivory3 | orchid3 | violetred1 | | deeppink1 | gray96 | ivory4 | orchid4 | violetred2 | | deeppink2 | gray97 | khaki | palegreen | violetred3 | | deeppink3 | gray98 | khaki1 | palegreen1 | violetred4 | | deeppink4 | gray99 | khaki2 | palegreen2 | wheat | | deepskyblue | gray100 | khaki3 | palegreen3 | wheat1 | | deepskyblue1 | green | khaki4 | palegreen4 | wheat2 | | deepskyblue2 | green1 | lavender | palegoldenrod | wheat3 | | deepskyblue3 | green2 | lavenderblush | paleturquoise | wheat4 | | deepskyblue4 | green3 | lavenderblush1 | paleturquoise1 | white | | dimgray | green4 | lavenderblush2 | paleturquoise2 | whitesmoke | | dimgrey | greenyellow | lavenderblush3 | paleturquoise3 | yellow | | dodgerblue | grey | lavenderblush4 | paleturquoise4 | yellow1 | | dodgerblue1 | grey0 | lawngreen | palevioletred | yellow2 | | dodgerblue2 | grey1 | lemonchiffon | palevioletred1 | yellow3 | | dodgerblue3 | grey2 | lemonchiffon1 | palevioletred2 | yellow4 | | dodgerblue4 | grey3 | lemonchiffon2 | palevioletred3 | yellowgreen |"},{"location":"primitives/#more-drawing-tools","title":"More drawing tools","text":"<p>The following helpers build on the same ideas. You can mix text colors, RGB tuples, or values from <code>C</code> with all of them.</p>"},{"location":"primitives/#grid","title":"<code>grid()</code>","text":"<p>Draws a helpful coordinate grid. Lines appear every 100 units with light labels. Use it when you are planning positions.</p> <p>Example \u2013 show the grid for planning</p> <pre><code>from drawzero import *\n\ngrid()\n</code></pre> <p>You can draw other shapes on top of the grid and then remove the <code>grid()</code> call once you finish planning.</p>"},{"location":"primitives/#polygoncolorred-points","title":"<code>polygon(color='red', *points)</code>","text":"<p>Draws the outline of a polygon. Pass each corner as its own <code>(x, y)</code> pair. The function joins the last point back to the first point automatically.</p> <p>Example \u2013 simple triangle</p> <pre><code>from drawzero import *\n\npolygon('orange', (200, 800), (500, 400), (800, 800))\n</code></pre> <p>Example \u2013 star outline</p> <pre><code>from drawzero import *\n\npoints = [\n    (500, 200),\n    (560, 380),\n    (740, 380),\n    (600, 500),\n    (660, 680),\n    (500, 580),\n    (340, 680),\n    (400, 500),\n    (260, 380),\n    (440, 380),\n]\npolygon('gold', *points)\n</code></pre>"},{"location":"primitives/#filled_polygoncolorred-points","title":"<code>filled_polygon(color='red', *points)</code>","text":"<p>Fills the inside of the polygon using the same point format.</p> <p>Example \u2013 kite shape with shadow</p> <pre><code>from drawzero import *\n\nshape = [(500, 200), (700, 400), (500, 800), (300, 400)]\nfilled_polygon('lightblue', *shape)\npolygon('navy', *shape)\n</code></pre> <p>Example \u2013 mountain silhouettes</p> <pre><code>from drawzero import *\n\nmountain1 = [(0, 800), (200, 400), (400, 800)]\nmountain2 = [(300, 800), (550, 300), (800, 800)]\nfilled_polygon((70, 90, 110), *mountain1)\nfilled_polygon((50, 70, 90), *mountain2)\n</code></pre> <p>The second polygon uses RGB tuples for a darker shade.</p>"},{"location":"primitives/#textcolorred-texthello-pos100-100-fontsize24-align","title":"<code>text(color='red', text='Hello!', pos=(100, 100), fontsize=24, align='..')</code>","text":"<p>Draws text on the canvas.</p> <ul> <li><code>text</code> is the string that you want to show.</li> <li><code>pos</code> marks the anchor point.</li> <li><code>fontsize</code> controls the size in pixels.</li> <li><code>align</code> decides how the anchor sticks to the text. The first symbol handles horizontal alignment (<code>'&lt;'</code> for left, <code>'.'</code> for center, <code>'&gt;'</code> for right). The second symbol handles vertical alignment (<code>'^'</code> for top, <code>'.'</code> for middle, <code>'v'</code> for bottom).</li> </ul> <p>Example \u2013 centered scoreboard</p> <pre><code>from drawzero import *\n\ntext('white', 'Level Complete!', (500, 120), 48, '.^')\n</code></pre> <p>Example \u2013 labels near shapes</p> <pre><code>from drawzero import *\n\nrect('white', (150, 700), 200, 120)\ntext('white', 'Player base', (150, 700), 24, '&lt;^')\ntext('yellow', 'Danger zone', (250, 760), 24, '..')\n</code></pre>"},{"location":"primitives/#fillcolorred","title":"<code>fill(color='red')</code>","text":"<p>Fills the whole canvas with a solid color. This is very useful for the background before you draw other objects.</p> <p>Example \u2013 night sky background</p> <pre><code>from drawzero import *\n\nfill((10, 10, 35))\nfilled_circle('white', (200, 150), 5)\nfilled_circle('white', (600, 220), 4)\n</code></pre> <p>Example \u2013 quick color reset</p> <pre><code>from drawzero import *\n\nfill('white')\nline('black', (100, 100), (900, 900))\n</code></pre> <p>Calling <code>fill('white')</code> removes old drawings by painting the entire canvas white before you start again.</p>"},{"location":"primitives/#ellipses-arcs-and-rotated-rectangles","title":"Ellipses, arcs, and rotated rectangles","text":"<p>These helpers let you create stretched circles and tilted rectangles. They follow the same color rules you saw before: you can use color names, RGB triples, or values from <code>C</code>. For transparency and stroke size tips, read Transparency (<code>alpha</code>) and line thickness (<code>line_width</code>).</p>"},{"location":"primitives/#ellipsecolorred-pos100-100-width500-height200-args-alpha255-line_width-int-none","title":"<code>ellipse(color='red', pos=(100, 100), width=500, height=200, *args, alpha=255, line_width: int = None)</code>","text":"<p>Draws the outline of an ellipse. The ellipse fits inside an invisible rectangle whose top-left corner is <code>pos</code>, whose <code>width</code> extends to the right, and whose <code>height</code> extends downward.</p> <p>Tips</p> <ul> <li>Think of the ellipse as a squashed circle. When <code>width</code> equals <code>height</code> you get a perfect circle outline.</li> <li>Placing the ellipse in the middle of the canvas is easy when you combine it with <code>grid()</code> from the previous section.</li> </ul> <p>Example \u2013 planet orbit guide</p> <pre><code>from drawzero import *\n\ngrid()\nellipse('white', (200, 300), 600, 200)\nfilled_circle('yellow', (500, 400), 40)\nfilled_circle('dodgerblue', (750, 400), 20)\n</code></pre> <p>The ellipse marks the orbit, while the filled circles show the star and the planet.</p> <p>Example \u2013 stage spotlight border</p> <pre><code>from drawzero import *\n\nfill((10, 10, 25))\nellipse('gold', (250, 150), 500, 700)\ntext('white', 'Talent Show', (500, 220), 48, '.^')\n</code></pre> <p>The tall ellipse surrounds the title like a glowing frame.</p>"},{"location":"primitives/#filled_ellipsecolorred-pos100-100-width500-height200-args-alpha255","title":"<code>filled_ellipse(color='red', pos=(100, 100), width=500, height=200, *args, alpha=255)</code>","text":"<p>Fills the entire ellipse with color, using the same bounding box idea as <code>ellipse</code>.</p> <p>Tips</p> <ul> <li>Layer multiple filled ellipses to build gradients or shadows.</li> <li>Use them to fake soft shapes such as clouds, ponds, or stadium tracks.</li> </ul> <p>Example \u2013 calm pond with reflection</p> <pre><code>from drawzero import *\n\nfill((120, 180, 255))\nfilled_ellipse((70, 120, 200), (200, 650), 600, 220)\nfilled_ellipse((150, 200, 255), (260, 690), 480, 140)\n</code></pre> <p>The second, smaller ellipse sits on top to suggest a highlight on the water.</p> <p>Example \u2013 running track lanes</p> <pre><code>from drawzero import *\n\nfill((30, 120, 30))\nfor offset in range(0, 80, 20):\n    filled_ellipse('sienna', (150 + offset, 200 + offset), 700 - 2 * offset, 400 - 2 * offset)\n</code></pre> <p>The loop paints four nested ellipses to imitate the rounded corners of a stadium track.</p>"},{"location":"primitives/#arccolorred-pos100-100-width500-height200-start_angle45-stop_angle270-alpha255-line_width-int-none","title":"<code>arc(color='red', pos=(100, 100), width=500, height=200, start_angle=45, stop_angle=270, alpha=255, line_width: int = None)</code>","text":"<p>Draws part of an ellipse outline between two angles. The angles are measured in degrees, where <code>0</code> points to the right and the values grow counterclockwise.</p> <p>Tips</p> <ul> <li>Use a difference between <code>start_angle</code> and <code>stop_angle</code> smaller than <code>360</code> to create a curved slice.</li> <li>Try combining <code>arc</code> with <code>filled_circle</code> eyes or gauges to add expressive details to your drawings.</li> </ul> <p>Example \u2013 smiling mouth on a face</p> <pre><code>from drawzero import *\n\nfill((255, 224, 189))\nfilled_circle('black', (420, 360), 15)\nfilled_circle('black', (580, 360), 15)\narc('brown', (360, 420), 280, 160, 200, 340)\n</code></pre> <p>Here the arc starts on the left side (near <code>200</code> degrees) and ends on the right side (near <code>340</code> degrees), leaving a curved smile on the bottom.</p> <p>Example \u2013 progress gauge</p> <pre><code>from drawzero import *\n\nfill((20, 20, 30))\nellipse('gray', (250, 250), 500, 500)\narc('lime', (250, 250), 500, 500, 180, 360)\ntext('white', '50%', (500, 520), 64, '.^')\n</code></pre> <p>The green arc begins on the left (<code>180</code> degrees) and ends on the right (<code>360</code> degrees), covering the lower half of the circle li ke a progress meter.</p>"},{"location":"primitives/#rect_rotatedcolorred-pos100-100-width500-height200-angle0-args-alpha255-line_width-int-none","title":"<code>rect_rotated(color='red', pos=(100, 100), width=500, height=200, angle=0, *args, alpha=255, line_width: int = None)</code>","text":"<p>Draws the outline of a rectangle that has been rotated around its center. The unrotated rectangle would start at <code>pos</code> and would measure <code>width</code> by <code>height</code>. Positive angles turn the shape counterclockwise.</p> <p>Tips</p> <ul> <li>Sketch the rectangle with <code>rect</code> first, then switch to <code>rect_rotated</code> when you know the right angle.</li> <li>Small angles (like <code>15</code> or <code>20</code> degrees) are great for giving objects a sense of motion.</li> </ul> <p>Example \u2013 tilted photo frame</p> <pre><code>from drawzero import *\n\nfill((240, 235, 220))\nrect_rotated('saddlebrown', (250, 200), 500, 350, -12)\nfilled_rect('white', (270, 220), 460, 310)\ntext('black', 'Family Trip', (500, 350), 36, '.^')\n</code></pre> <p>The thin negative angle makes the frame lean to the right.</p> <p>Example \u2013 warning sign</p> <pre><code>from drawzero import *\n\nfill((40, 40, 40))\nrect_rotated('yellow', (350, 300), 300, 300, 45)\ntext('black', '!', (500, 450), 180, '.^')\n</code></pre> <p>Rotating a square by <code>45</code> degrees turns it into a diamond-shaped outline.</p>"},{"location":"primitives/#filled_rect_rotatedcolorred-pos100-100-width500-height200-angle0-args-alpha255","title":"<code>filled_rect_rotated(color='red', pos=(100, 100), width=500, height=200, angle=0, *args, alpha=255)</code>","text":"<p>Fills the rotated rectangle using the same center and angle rules as <code>rect_rotated</code>.</p> <p>Tips</p> <ul> <li>Combine <code>filled_rect_rotated</code> with <code>rect_rotated</code> of a different color to get borders.</li> <li>Use several rotated rectangles together to build windmill blades or paper pinwheels.</li> </ul> <p>Example \u2013 rotating propeller art</p> <pre><code>from drawzero import *\n\nfill((15, 15, 35))\nfor blade in range(4):\n    filled_rect_rotated('deepskyblue', (460, 360), 80, 280, blade * 45)\nfilled_circle('white', (500, 500), 60)\n</code></pre> <p>Each iteration draws one blade by rotating the same rectangle.</p> <p>Example \u2013 cozy rug on the floor</p> <pre><code>from drawzero import *\n\nfill((120, 85, 60))\nfilled_rect_rotated((200, 120, 70), (250, 250), 500, 320, 8)\nrect_rotated((120, 60, 30), (250, 250), 500, 320, 8)\n</code></pre> <p>The filled rectangle creates the fabric, and the outline adds a stitched border.</p>"},{"location":"pt/","title":"Pt helper reference","text":"<p>The <code>Pt</code> class is a small helper that acts both like a 2D point and like a very light turtle. It lives in <code>drawzero.utils.pt</code> and is imported for you when you write <code>from drawzero import *</code>. Use <code>Pt</code> whenever you want to store a position, move it around, and pass it into the drawing helpers from Drawing primitives or Animations.</p> <p>This page explains the full <code>Pt</code> API in simple language, with many short examples that you can copy into an interactive shell or one of the example scripts.  It replaces the auto-generated snippet that used to be here.</p>"},{"location":"pt/#quick-import-and-first-steps","title":"Quick import and first steps","text":"<pre><code>from drawzero import *\n\npoint = Pt()          # (0, 0) facing east (heading = 0\u00b0)\nother = Pt(200, 150)  # x=200, y=150\n</code></pre> <p><code>Pt</code> stores three values:</p> <ul> <li><code>x</code> \u2013 horizontal coordinate (0 is the left edge of the canvas).</li> <li><code>y</code> \u2013 vertical coordinate (0 is the top edge).</li> <li><code>heading</code> \u2013 direction in degrees. <code>0</code> means \u201cpointing right\u201d, <code>90</code> means \u201cpointing up\u201d.</li> </ul> <p>All drawing helpers accept a <code>Pt</code> object anywhere they expect a coordinate pair. For example:</p> <pre><code>from drawzero import *\n\ncenter = Pt(500, 400)\npoint = Pt(200, 200)\n\nfilled_circle('gold', center, 80)\nline('black', point, center)  # `line` reads the `(x, y)` from each Pt\n</code></pre>"},{"location":"pt/#creating-and-reading-points","title":"Creating and reading points","text":""},{"location":"pt/#constructors","title":"Constructors","text":"<pre><code>Pt()\nPt(x_value, y_value)\nPt(x_value, y_value, heading=degrees)\n</code></pre> <ul> <li>All numbers can be integers or floats.</li> <li>If you leave <code>heading</code> out, DrawZero assumes <code>0</code> degrees.</li> </ul>"},{"location":"pt/#getting-the-stored-values","title":"Getting the stored values","text":"<pre><code>point = Pt(120, 345, heading=30)\n\npoint.x        # 120\npoint.y        # 345\npoint.heading  # 30\n\npoint.pos()       # (120.0, 345.0)\npoint.position()  # same as pos()\npoint.xcor()      # 120.0\npoint.ycor()      # 345.0\n</code></pre> <p>The <code>xcor</code>/<code>ycor</code> helpers round the values to 10 decimal places so the output stays tidy in the console.</p>"},{"location":"pt/#vector-style-arithmetic","title":"Vector-style arithmetic","text":"<p><code>Pt</code> behaves like a mutable 2D vector. You can add, subtract, and scale points without writing your own loops. Each operation creates a new <code>Pt</code> unless it ends with <code>=</code> (like <code>+=</code>).</p> <pre><code>start = Pt(50, 20)\noffset = Pt(10, -5)\n\nresult = start + offset   # Pt(60, 15, heading=0.0)\nstart += offset           # start is now Pt(60, 15, heading=0.0)\nmirror = -offset          # Pt(-10, 5, heading=0.0)\n</code></pre> <p>Scaling works with plain numbers:</p> <pre><code>point = Pt(5, 8)\nprint(point * 3)     # Pt(15, 24, heading=0.0)\nprint(2 * point)     # Pt(10, 16, heading=0.0)\nprint(point / 2)     # Pt(2.5, 4.0, heading=0.0)\n</code></pre> <p>When you need only the length of the vector, call <code>abs(point)</code>.</p> <pre><code>hyp = Pt(3, 4)\nprint(abs(hyp))  # 5.0\n</code></pre>"},{"location":"pt/#copying-and-unpacking","title":"Copying and unpacking","text":"<p>Use <code>.copy()</code> to duplicate the point while keeping the original intact.</p> <pre><code>head = Pt(100, 100)\nshadow = head.copy()\nhead.forward(50)\n# `shadow` still remembers the old coordinates\n</code></pre> <p><code>Pt</code> also supports unpacking and indexing:</p> <pre><code>p = Pt(7, 9)\n\nx, y = p        # iterates over x then y\np[0]            # 7\np[1]            # 9\np[:2]           # [7, 9]\nlen(p)          # always 2\n</code></pre>"},{"location":"pt/#turtle-style-movement","title":"Turtle-style movement","text":"<p><code>Pt</code> keeps a heading angle and can move in that direction. This is perfect for drawing polygons or animation paths.</p> <pre><code>walker = Pt()\nwalker.forward(100)   # moves along heading (initially east)\nwalker.right(90)\nwalker.forward(50)\nprint(walker.pos())   # (100.0, 50.0)\n</code></pre> <p>Key methods and their aliases:</p> Action Preferred name Aliases Move forward <code>forward(distance)</code> <code>fd(distance)</code> Move backward <code>backward(distance)</code> <code>back(distance)</code>, <code>bk(distance)</code> Turn right <code>right(angle)</code> <code>rt(angle)</code> Turn left <code>left(angle)</code> <code>lt(angle)</code> Set heading directly <code>setheading(angle)</code> <code>seth(angle)</code> Reset to origin <code>reset()</code> or <code>home()</code> \u2014 <p>Headings always wrap to the range <code>[0, 360)</code>.</p>"},{"location":"pt/#example-regular-polygon-helper","title":"Example \u2013 regular polygon helper","text":"<pre><code>from drawzero import *\nfrom math import sin, pi\n\ndef regular_polygon(center, sides, radius):\n    corner = Pt(center.x, center.y - radius)\n    corner.setheading(0)\n    angle = 360 / sides\n    vertices = []\n    for _ in range(sides):\n        vertices.append(corner.pos())\n        corner.right(angle)\n        corner.forward(2 * radius * sin(pi / sides))\n    polygon('white', vertices)\n\nregular_polygon(Pt(300, 300), sides=6, radius=120)\n</code></pre> <p><code>polygon</code> comes from Drawing primitives. <code>Pt</code> supplies the vertex coordinates.</p>"},{"location":"pt/#absolute-moves-and-rotations","title":"Absolute moves and rotations","text":"<p>Sometimes you need to jump to a location or rotate around another point.</p> <ul> <li><code>goto(x, y)</code> / <code>setpos(...)</code> / <code>setposition(...)</code> \u2013 move to exact coordinates without changing heading.</li> <li><code>rotate_around(angle, pivot)</code> \u2013 spin around another <code>Pt</code>, tuple, or list.</li> <li><code>move_towards(distance, target)</code> \u2013 move a fixed distance in the direction of another point.</li> </ul> <pre><code>p = Pt(100, 100)\np.goto(400, 200)           # -&gt; Pt(400, 200, heading=0.0)\np.rotate_around(90, (200, 200))  # pivot around absolute point\np.move_towards(50, Pt(200, 500))\n</code></pre> <p><code>rotate_around</code> rotates counter-clockwise when the angle is positive. If you need the shortest path towards a target, <code>move_towards</code> combines the direction and step size for you.</p>"},{"location":"pt/#distance-and-angle-helpers","title":"Distance and angle helpers","text":"<pre><code>p = Pt(0, 0)\nq = Pt(30, 40)\n\np.distance(q)      # 50.0\np.towards(q)       # 53.1301023542 degrees\np.is_left_of(10)   # True because 0 &lt; 10\np.is_right_of(-5)  # True because 0 &gt; -5\n</code></pre> <p>Comparison helpers use the canvas axes:</p> <ul> <li><code>is_above(y_value)</code> returns <code>True</code> if the point is higher on the screen (smaller <code>y</code>).</li> <li><code>is_below(y_value)</code> returns <code>True</code> if the point is lower on the screen (larger <code>y</code>).</li> <li><code>is_left_of(x_value)</code> returns <code>True</code> if <code>x</code> is smaller.</li> <li><code>is_right_of(x_value)</code> returns <code>True</code> if <code>x</code> is larger.</li> </ul> <p>Use them to keep sprites within bounds:</p> <pre><code>ball = Pt(500, -10, heading=90)\nif ball.is_above(0):\n    ball.flip_vertically()  # bounce from the top edge\n</code></pre> <p><code>flip_vertically()</code> and <code>flip_horizontally()</code> mirror the heading without changing the position. This is handy for collision logic in small games.</p>"},{"location":"pt/#working-with-drawing-helpers","title":"Working with drawing helpers","text":"<p>Most drawing helpers accept <code>Pt</code> objects directly. You can mix plain tuples and points in the same call.</p> <pre><code>from drawzero import *\n\nstart = Pt(150, 150)\nend = Pt(600, 300)\n\nline('cyan', start, end)\nrect('orange', start, 200, 120)\nfilled_circle('white', end, 40)\n</code></pre> <p>For shapes that expect a list of vertices (like <code>polygon</code> or <code>filled_polygon</code>), call <code>.pos()</code> on each <code>Pt</code>.</p> <pre><code>triangle = [Pt(400, 200), Pt(300, 450), Pt(500, 450)]\npolygon('white', [p.pos() for p in triangle])\n</code></pre> <p>To connect the dots with animation, combine this page with Animations and the <code>tick()</code> call shown there.</p>"},{"location":"pt/#using-pt-inside-loops-and-animations","title":"Using Pt inside loops and animations","text":"<p><code>Pt</code> shines when you update positions every frame. The example below creates a simple orbit.</p> <pre><code>from drawzero import *\n\ncenter = Pt(500, 500)\nplanet = Pt(650, 500)\nplanet.setheading(90)\n\nwhile tick():\n    clear()\n    filled_circle('navy', center, 40)\n    filled_circle('orange', planet, 20)\n    planet.rotate_around(3, center)\n</code></pre> <p>Read Examples overview and open <code>05_points.py</code> or <code>09_animation_rectangles.py</code> to see longer scripts that use these methods together.</p>"},{"location":"pt/#troubleshooting-tips","title":"Troubleshooting tips","text":"<ul> <li>Movement looks wrong? Remember that the screen origin <code>(0, 0)</code> is the top-left corner. Moving \u201cup\u201d means decreasing <code>y</code>.</li> <li>Heading jumps unexpectedly? Check if you used <code>backward()</code> or <code>forward()</code> with negative numbers. Both change the point but keep the heading.</li> <li><code>distance</code> returns a float with many decimals. That is normal. Use <code>round(value, 2)</code> when printing if you want fewer digits.</li> <li>Need to reset everything? Call <code>reset()</code> or <code>home()</code> to set <code>(x, y)</code> to <code>(0, 0)</code> and <code>heading</code> to <code>0</code>.</li> </ul>"},{"location":"pt/#where-to-go-next","title":"Where to go next","text":"<ul> <li>Drawing primitives \u2013 shapes and text helpers that happily accept <code>Pt</code> objects.</li> <li>Animations \u2013 how to redraw every frame and schedule updates with <code>tick()</code>.</li> <li>Gradient helper \u2013 smooth color transitions that go well with moving points.</li> <li>Examples overview \u2013 table of scripts, including the ones that focus on <code>Pt</code>.</li> </ul> <p>Experiment with the snippets above, then mix <code>Pt</code> with the other utilities to build your own scenes.</p>"},{"location":"transparency_and_line_width/","title":"Transparency (<code>alpha</code>) and line thickness (<code>line_width</code>)","text":"<p>Many DrawZero helpers accept two optional parameters: <code>alpha</code> for transparency and <code>line_width</code> for stroke thickness. This page explains what they do, when to use them, and how to avoid common mistakes. The tone stays simple so that learners with basic English can still follow the ideas.</p>"},{"location":"transparency_and_line_width/#why-these-parameters-matter","title":"Why these parameters matter","text":"<ul> <li><code>alpha</code> controls how much the background shows through your drawing. Lower values make the object look lighter or ghost-like. Higher values make it solid.</li> <li><code>line_width</code> controls how thick the outline of a shape or line appears. Thin lines are great for details. Thick lines help emphasize borders or UI panels.</li> </ul> <p>Together, these parameters let you build depth, focus, and style in your sketches.</p>"},{"location":"transparency_and_line_width/#quick-reference","title":"Quick reference","text":"Parameter Works with Default value Allowed values <code>alpha</code> <code>line</code>, <code>circle</code>, <code>filled_circle</code>, <code>rect</code>, <code>filled_rect</code>, <code>ellipse</code>, <code>filled_ellipse</code>, <code>arc</code>, <code>polygon</code>, <code>filled_polygon</code>, <code>rect_rotated</code>, <code>filled_rect_rotated</code>, <code>fill</code>, <code>image</code> <code>255</code> Any integer from <code>0</code> to <code>255</code> <code>line_width</code> Outline helpers such as <code>line</code>, <code>circle</code>, <code>rect</code>, <code>ellipse</code>, <code>arc</code>, <code>polygon</code>, <code>rect_rotated</code> <code>4</code> (virtual units, roughly 4 pixels on the default 1000\u00d71000 canvas) Non-negative integers. Use <code>0</code> to fill shapes through the outline helper. <p>\ud83d\udca1 Filled helpers (<code>filled_circle</code>, <code>filled_rect</code>, and so on) already set <code>line_width=0</code> internally, so you usually do not need to pass it yourself.</p>"},{"location":"transparency_and_line_width/#understanding-alpha","title":"Understanding <code>alpha</code>","text":"<p><code>alpha</code> measures opacity on a scale from <code>0</code> (fully transparent) to <code>255</code> (fully opaque). DrawZero rounds the value to an integer, so pass whole numbers.</p> Value Visual result <code>0</code> The object becomes invisible. Good for hiding elements without deleting code. <code>64</code> Very light ghost of the original color. Useful for shadows and planning guides. <code>128</code> Half-transparent. Background is clearly visible through the object. <code>192</code> Mostly solid with a soft edge. Great for highlights. <code>255</code> Fully solid. Default setting."},{"location":"transparency_and_line_width/#layered-example-glowing-button","title":"Layered example \u2013 glowing button","text":"<pre><code>from drawzero import *\n\nfill((20, 20, 35))\nbase = (500, 500)\nfilled_circle('#4caf50', base, 120, alpha=220)\nfilled_circle('#81c784', base, 90, alpha=160)\nfilled_circle('white', base, 60, alpha=90)\ntext('white', 'PLAY', base, 48, '.^')\n</code></pre> <p>Each circle uses a different alpha value. The background shines through the outer rings, creating a glow effect.</p>"},{"location":"transparency_and_line_width/#example-glass-window-using-shapes","title":"Example \u2013 glass window using shapes","text":"<pre><code>from drawzero import *\n\nfill('#202840')\nrect('white', (150, 200), 700, 500, line_width=12)\nfilled_rect('#90caf9', (150, 200), 700, 500, alpha=120)\nline('white', (150, 450), (850, 450), alpha=160, line_width=6)\nline('white', (500, 200), (500, 700), alpha=160, line_width=6)\n</code></pre> <p>The rectangle outline stays solid, while the inner filled rectangle uses a medium alpha to look like glass.</p>"},{"location":"transparency_and_line_width/#example-fading-image-copies","title":"Example \u2013 fading image copies","text":"<pre><code>from drawzero import *\n\nfill('black')\nfor layer, opacity in enumerate(range(200, 40, -40)):\n    image('runner.png', (200 + layer * 60, 420), width=220, alpha=opacity)\n</code></pre> <p>This snippet combines <code>image()</code> with different alpha values to show a runner leaving a trail. For more details about the <code>image()</code> helper, read Working with images.</p>"},{"location":"transparency_and_line_width/#tips-for-using-alpha","title":"Tips for using <code>alpha</code>","text":"<ul> <li>Keep alpha values between <code>30</code> and <code>80</code> for soft shadows and between <code>120</code> and <code>200</code> for glow or UI overlays.</li> <li>When stacking several transparent layers, start drawing from the darkest background to the lightest foreground.</li> <li><code>alpha</code> multiplies any transparency already stored in a PNG image. A semi-transparent pixel with per-pixel alpha <code>128</code> becomes even lighter if you call <code>image(..., alpha=128)</code>.</li> <li>Passing <code>None</code> or leaving the argument out uses the default value <code>255</code>.</li> <li>Values outside the range raise a <code>BadDrawParmsError</code>. Double-check that your code produces integers.</li> </ul>"},{"location":"transparency_and_line_width/#understanding-line_width","title":"Understanding <code>line_width</code>","text":"<p><code>line_width</code> describes how thick the outline of a primitive should be. The value is measured in virtual canvas units. On the default 1000\u00d71000 canvas, one unit is roughly one pixel.</p> <code>line_width</code> Visual style <code>1</code>\u2013<code>2</code> Very thin lines for delicate details or sketch guides. <code>3</code>\u2013<code>6</code> Standard outlines. The default <code>4</code> lives here. <code>8</code>\u2013<code>12</code> Heavy borders for panels, speech bubbles, or map outlines. <code>20</code> and above Bold graphic style. Useful for cartoon shadows or timelines. <code>0</code> Special case. The shape becomes filled because the outline has no width."},{"location":"transparency_and_line_width/#example-using-different-line-widths-on-circles","title":"Example \u2013 using different line widths on circles","text":"<pre><code>from drawzero import *\n\nfill('black')\nfor step, width in enumerate([2, 4, 8, 16]):\n    circle('cyan', (200 + step * 150, 500), 60, line_width=width)\n    text('white', f'line_width={width}', (200 + step * 150, 620), 24, '.^')\n</code></pre> <p>The four circles let you compare how the outline grows as <code>line_width</code> increases.</p>"},{"location":"transparency_and_line_width/#example-drawing-a-filled-shape-through-the-outline-helper","title":"Example \u2013 drawing a filled shape through the outline helper","text":"<pre><code>from drawzero import *\n\nfill('#263238')\nrect('orange', (250, 250), 500, 300, line_width=0, alpha=220)\n</code></pre> <p>Setting <code>line_width=0</code> tells the renderer to fill the rectangle. This is how the convenience helper <code>filled_rect()</code> works internally.</p>"},{"location":"transparency_and_line_width/#example-precise-outlines-with-polygons","title":"Example \u2013 precise outlines with polygons","text":"<pre><code>from drawzero import *\n\nfill('#0d1b2a')\npoints = [(200, 800), (500, 200), (800, 800)]\npolygon('#e0e1dd', *points, line_width=6)\npolygon('#778da9', *points, line_width=2, alpha=160)\n</code></pre> <p>The first polygon creates a thick border, and the second one on top adds a thin highlight with partial transparency.</p>"},{"location":"transparency_and_line_width/#tips-for-using-line_width","title":"Tips for using <code>line_width</code>","text":"<ul> <li>Use the same <code>line_width</code> across related elements (for example, all buttons) to keep a consistent style.</li> <li>When drawing animations, cache the chosen value in a variable so it stays constant frame to frame.</li> <li>Large <code>line_width</code> values need extra space around the shape. Make sure your coordinates leave padding so the stroke is not cut off by the canvas edge.</li> <li>Negative values are not allowed. If you calculate the width, wrap it in <code>max(0, value)</code> to avoid mistakes.</li> </ul>"},{"location":"transparency_and_line_width/#mixing-alpha-and-line_width","title":"Mixing <code>alpha</code> and <code>line_width</code>","text":"<p>These parameters can work together for polished designs.</p> <pre><code>from drawzero import *\n\nfill('#1a1a1a')\nouter = (150, 150)\ninner = (250, 250)\nrect('#ff9800', outer, 700, 700, line_width=14, alpha=220)\nrect('#ffc107', inner, 500, 500, line_width=6, alpha=140)\nfilled_rect('#ffffff', (320, 420), 360, 200, alpha=30)\ntext('white', 'Mission Briefing', (500, 360), 42, '.^')\n</code></pre> <p>The outer rectangle has a thick, almost solid stroke. The inner rectangle uses a thinner, more transparent line to add depth. The semi-transparent filled rectangle creates a readable panel.</p>"},{"location":"transparency_and_line_width/#troubleshooting-checklist","title":"Troubleshooting checklist","text":"Symptom Likely cause Fix Shape looks the same after changing <code>alpha</code>. The helper you used does not accept <code>alpha</code> (for example, <code>text()</code>). Check the documentation of that helper. If it lacks <code>alpha</code>, draw the text on top of a semi-transparent shape instead. Stroke looks blurry. The line width is very large for a small shape. Reduce <code>line_width</code> or increase the shape size. <code>BadDrawParmsError: bad alpha</code>. The value was outside <code>0</code>\u2013<code>255</code> or not a number. Clamp the number or convert it with <code>int()</code>. <code>BadDrawParmsError: bad width</code>. <code>line_width</code> was negative or not numeric. Ensure you pass a non-negative integer. Transparent layers disappear in random order. You draw the brightest elements first. Later opaque shapes cover them. Draw the darkest background first, then lighter transparent layers, then solid highlights. <p>With these guidelines you can choose <code>alpha</code> and <code>line_width</code> values confidently and make your drawings look professional.</p>"}]}